<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System_designs on Y.CH.Y</title><link>/system_design/</link><description>Recent content in System_designs on Y.CH.Y</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Y.CH.Y</copyright><lastBuildDate>Mon, 15 Feb 2021 22:20:24 +0800</lastBuildDate><atom:link href="/system_design/index.xml" rel="self" type="application/rss+xml"/><item><title>系统设计::设计谷歌硬盘</title><link>/system_design/system_design_interview_15/</link><pubDate>Mon, 15 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_15/</guid><description>设计谷歌硬盘 近年来，Google Drive、Dropbox、微软 OneDrive 和苹果 iCloud 等云存储服务已经变得非常流行。在本章中，你被要求设计 Google Drive。
在进入设计之前，让我们花点时间来了解一下 Google Drive。Google Drive 是一个文件存储和同步服务，帮助你在云端存储文档、照片、视频和其他文件。你可以从任何电脑、智能手机和平板电脑访问你的文件。你可以轻松地与朋友、家人和同事分享这些文件[1]。图 15-1 和 15-2 分别显示了谷歌硬盘在浏览器和移动应用程序上的样子。
理解问题并确定设计范围 设计谷歌硬盘是一个大项目，因此，提出问题以缩小范围是很重要的。
应聘者：最重要的功能是什么？
面试官：上传和下载文件，文件同步，以及通知。
应聘者：这是一个移动应用，一个网络应用，还是两者都有？
面试官：都是。
应聘者：支持的文件格式有哪些？
面试官：任何文件类型。
应聘者：文件是否需要加密？
面试官：是的。是的，存储中的文件必须是加密的。
应聘者：文件大小有限制吗？
面试官：有，文件必须是 10GB 或更小。
应聘者：该产品有多少用户？
面试官：10M DAU。
在本章中，我们将重点介绍以下功能。
添加文件。添加文件的最简单方法是将文件拖放到 Google Drive 中。 下载文件。 在多个设备上同步文件。当一个文件被添加到一个设备上时，它将自动同步到其他设备。 查看文件修订情况。 与你的朋友、家人和同事分享文件 当一个文件被编辑、删除或与你分享时，发送通知。本章未讨论的功能包括。 谷歌文档的编辑和协作。Google doc 允许多个人同时编辑同一个文件。这不在我们的设计范围之内。 除了澄清需求之外，了解非功能需求也很重要。
可靠性。可靠性对于一个存储系统是极其重要的。数据丢失是不可接受的。 快速的同步速度。如果文件同步需要太多时间，用户会变得不耐烦并放弃该产品。 带宽使用。如果一个产品需要大量不必要的网络带宽，用户就会不高兴，特别是当他们使用移动数据计划时。 可扩展性。系统应该能够处理大量的流量。 高可用性。当一些服务器离线、速度减慢或出现意外的网络错误时，用户仍应能使用该系统。 粗略估计 假设该应用程序有 5000 万注册用户和 1000 万 DAU。 用户得到 10GB 的免费空间。 假设用户每天上传 2 个文件。平均文件大小为 500KB。 读写比为 1:1。 分配的总空间。5000 万 * 10 GB = 500 Petabyte 上传 API 的 QPS：1000 万 * 2 峰值 QPS = QPS * 2 = 480 提出高水平的设计并获得认同 我们不从一开始就展示高层次的设计图，而是采用一种稍微不同的方法。我们将从简单的东西开始：在一个单一的服务器中建立所有的东西。然后，逐渐扩大规模，支持数百万用户。通过做这个练习，它将刷新你对书中涉及的一些重要话题的记忆。</description></item><item><title>系统设计::设计YOUTUBE</title><link>/system_design/system_design_interview_14/</link><pubDate>Sun, 14 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_14/</guid><description>设计 YOUTUBE 在本章中，你被要求设计 YouTube。这个问题的解决方案可以应用于其他面试问题，如设计一个视频共享平台，如 Netflix 和 Hulu。图 14-1 显示了 YouTube 的主页。
YouTube 看起来很简单：内容创作者上传视频，观众点击播放。它真的那么简单吗？并非如此。在简单的背后有很多复杂的技术。让我们看看 2020 年 YouTube 的一些令人印象深刻的统计数据、人口统计学和有趣的事实[1] [2]。
每月活跃用户总数：20 亿。 每天观看的视频数量。50 亿。 73%的美国成年人使用 YouTube。 YouTube 上有 5000 万创作者。 2019 年全年，YouTube 的广告收入为 151 亿美元，比 2018 年增长 36%。 YouTube 占所有移动互联网流量的 37%。 YouTube 有 80 种不同的语言。 从这些统计数据中，我们知道 YouTube 是巨大的，全球性的，并且赚了很多钱。
理解问题，确立设计范围 如图 14-1 所示，除了观看视频，你还可以在 YouTube 上做很多事情。例如，评论、分享或喜欢一个视频，将一个视频保存到播放列表中，订阅一个频道等等。在 45 或 60 分钟的采访中，不可能设计所有内容。因此，提出问题以缩小范围是很重要的。
应聘者：哪些功能是重要的？
面试官：上传视频和观看视频的能力。
应聘者：我们需要支持哪些客户？
面试官：移动应用、网络浏览器和智能电视。
应聘者：我们有多少日活跃用户？
面试官：500 万
应聘者：每天花在产品上的平均时间是多少？
面试官：30 分钟。
应聘者：我们需要支持国际用户吗？
面试官：是的，很大比例的用户是国际用户。
应聘者：支持的视频分辨率是多少？
面试官：系统可以接受大部分的视频分辨率和格式。</description></item><item><title>系统设计::设计一个搜索自动补全系统</title><link>/system_design/system_design_interview_13/</link><pubDate>Sat, 13 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_13/</guid><description>设计一个搜索自动补全系统 在谷歌上搜索或在亚马逊购物时，当你在搜索框中输入时，会有一个或多个与搜索词相匹配的内容呈现给你。这一功能被称为自动补全、提前输入、边输入边搜索或增量搜索。图 13-1 是谷歌搜索的一个例子，当在搜索框中输&amp;quot;dinner&amp;quot;时，显示了一个自动补全的结果列表。搜索自动补全是许多产品的一个重要功能。这就把我们引向了面试问题：设计一个搜索自动补全系统，也&amp;quot;设计 top k&amp;quot;&amp;ldquo;设计 top k 最多人搜索的查询&amp;rdquo;。
理解问题并确定设计范围 处理任何系统设计面试问题的第一步是提出足够的问题来澄清需求。下面是一个应聘者与面试官互动的例子。
应聘者：是否只支持在搜索查询的开始阶段进行匹配，还是在中间也支持？ 面试官：只有在搜索查询的开始阶段。 应聘者：系统应该返回多少个自动补全的建议？ 面试官：5 应聘者：系统如何知道要返回哪 5 条建议？ 面试官：这是由受欢迎程度决定的，由历史查询频率决定。 应聘者：系统是否支持拼写检查？ 面试官：不，不支持拼写检查或自动更正。 应聘者：搜索查询是用英语吗？ 面试官：是的。如果最后时间允许，我们可以讨论多语言支持。 应聘者：我们是否允许大写字母和特殊字符？ 面试官：不，我们假设所有的搜索查询都是小写字母。 应聘者：有多少用户使用该产品？ 面试官：1000 万 DAU。
以下是需求的摘要。
快速响应时间。当用户输入搜索查询时，自动补全的建议必须足够快地显示出来。一篇关于 Facebook 自动补全系统的文章[1]显示，该系统需要在 100 毫秒内返回结果。否则会造成卡顿。 相关性。自动补全的建议应该与搜索词相关。 排序。系统返回的结果必须按照流行度或其他排名模式进行排序。 可扩展性。系统可以处理高流量。 高可用性。当系统的一部分脱机、速度减慢或遇到意外的网络错误时，系统应保持可用和可访问。 粗略估计 假设有 1000 万日活跃用户（DAU）。
一个人平均每天进行 10 次搜索。 每个查询字符串有 20 个字节的数据。 假设我们使用 ASCII 字符编码。1 个字符 = 1 个字节 假设一个查询包含 4 个词，每个词平均包含 5 个字符。 那就是每个查询有 4 x 5 = 20 字节。 对于在搜索框中输入的每一个字符，客户端都会向后台发送一个自动补全建议的请求。平均来说，每个搜索查询会发送 20 个请求。例如，在你输入完&amp;quot;dinner&amp;quot;时，以下 6 个请求被发送到后端。 search?</description></item><item><title>系统设计::设计一个聊天系统</title><link>/system_design/system_design_interview_12/</link><pubDate>Fri, 12 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_12/</guid><description>设计一个聊天系统 在这一章中，我们探讨了一个聊天系统的设计。几乎每个人都在使用一个聊天应用程序。图 12-1 显示了市场上一些最流行的应用程序。
聊天应用程序对不同的人执行不同的功能。敲定确切的要求是极其重要的。例如，当面试官想到一对一的聊天时，您不希望设计一个专注于群组聊天的系统。探索功能要求是很重要的。
理解问题并确定设计范围 就要设计的聊天应用程序的类型达成一致是至关重要的。在市场上，有像 Facebook Messenger、微信和 WhatsApp 这样一对一的聊天应用，也有像 Slack 这样专注于群组聊天的办公聊天应用，或者像 Discord 这样专注于大型群组互动和低语音聊天延迟的游戏聊天应用。
第一组澄清问题应该明确面试官要求你设计一个聊天系统时，她心里想的到底是什么。至少要弄清楚你是应该专注于一对一的聊天还是群组聊天应用。你可以问以下一些问题。
应聘者：我们应该设计什么样的聊天应用程序？一对一还是基于群组？
面试官：它应该同时支持 1 对 1 和群组聊天。
应聘者：这是一个移动应用吗？还是网络应用？或者两者都是？
面试官：都是。
应聘者：这个应用程序的规模是多少？是创业公司的应用还是大规模的？
面试官：它应该支持 5000 万日活跃用户（DAU）。
应聘者：对于群组聊天，群组成员的限制是什么？
面试官：最多 100 人
应聘者：聊天软件的哪些功能很重要？能否支持附件？
面试官：1 对 1 聊天，群聊，在线指标。系统只支持文字信息。
应聘者：信息大小有限制吗？
面试官：是的。是的，文本长度应小于 10 万个字符。
应聘者：是否需要端对端加密？
面试官：不需要。目前不需要，但如果时间允许，我们会讨论这个问题。
应聘者：我们应将聊天记录保存多长时间？
面试官：永远。
在这一章中，我们将重点设计一个类似于 Facebook messenger 的聊天应用，并强调以下特点。
一对一的聊天，传递延迟低 小型群组聊天（最多 100 人）。 显示在线 支持多种设备。同一账户可以同时登录多个账户。 推送通知 就设计规模达成一致也很重要。我们将设计一个支持 5000 万 DAU 的系统。
提出高层次的设计并获得认同 为了开发一个高质量的设计，我们应该对客户和服务器的通信方式有一个基本的了解。在一个聊天系统中，客户端可以是移动应用程序或 Web 应用程序。客户端之间并不直接交流。相反，每个客户端都连接到一个聊天服务，它支持上面提到的所有功能。让我们专注于基本操作。聊天服务必须支持以下功能。
接收来自其他客户的消息。 为每条消息寻找合适的收件人，并将消息转发给收件人。 如果收件人不在线，在服务器上保留该收件人的消息，直到她在线。 图 12-2 显示了客户端（发送者和接收者）和聊天服务之间的关系。</description></item><item><title>系统设计::设计一个新闻源系统</title><link>/system_design/system_design_interview_11/</link><pubDate>Thu, 11 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_11/</guid><description>设计一个新闻源系统 在本章中，你被要求设计一个新闻源系统。什么是新闻源？根据 Facebook 的帮助页面，&amp;ldquo;新闻源是在你的主页中间不断更新的故事列表。新闻提要包括状态更新、照片、视频、链接、应用活动，以及你在 Facebook 上关注的人、网页和团体的喜欢&amp;rdquo;[1]。这是一个流行的面试问题。经常被问到的类似问题有：设计 Facebook 的新闻提要，Instagram 的提要，Twitter 的时间线，等等。
理解问题并确定设计范围 第一组澄清问题是为了了解当面试官要求你设计一个新闻源系统时，她的想法是什么。最起码，你应该弄清楚要支持哪些功能。下面是一个应聘者与面试官互动的例子。
应聘者：这是一个移动应用程序吗？还是一个网络应用？或者两者都是？ 面试官：都是 应聘者：有哪些重要的功能？ 面试官：用户可以发布帖子，并在新闻源页面上看到她朋友的帖子。 应聘者：新闻源是按照逆时针顺序还是任何特定的顺序排序的，比如话题得分？比如说，你的亲密朋友的帖子得分更高。 面试官：为了简单起见，我们假设新闻源是按逆时针顺序排序的。 应聘者：一个用户可以有多少个朋友？ 面试官：5000 应聘者：流量是多少？ 面试官：1000 万 DAU 应聘者：新闻源可以包含图片、视频，还是只有文字？ 面试官：可以。它可以包含媒体文件，包括图片和视频。
现在你已经收集了需求，我们把重点放在设计系统上。
提出高层次的设计并获得认同 该设计分为两个流程：新闻发布和新闻源构建。
新闻发布：当一个用户发布了一个帖子，相应的数据被写入缓存和数据库。一个帖子被填充到她朋友的新闻源中。 新闻源构建：为简单起见，我们假设新闻源是通过将朋友的帖子按逆时针顺序聚合而构建的。 新闻源 API 新闻源 API 是客户端与服务器通信的主要方式。这些 API 是基于 HTTP 的，允许客户端执行操作，其中包括发布状态、检索新闻源、添加朋友等。我们讨论两个最重要的 API：Feed publishing API 和 News Feed retrieval API。
Feed publishing API 要发布一个帖子，将向服务器发送一个 HTTP POST 请求。该 API 显示如下。
POST /v1/me/feed
Params: content：内容是帖子的文本。 auth_token：它用于验证 API 请求。 新闻提要检索 API 检索新闻提要的 API 如下所示。
GET /v1/me/feed</description></item><item><title>系统设计::设计一个推送系统</title><link>/system_design/system_design_interview_10/</link><pubDate>Wed, 10 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_10/</guid><description>设计一个推送系统 近年来，通知系统已经成为许多应用程序的一个非常流行的功能。通知会提醒用户一些重要的信息，如突发新闻、产品更新、事件、产品等。它已经成为我们日常生活中不可缺少的一部分。在本章中，你被要求设计一个通知系统。
一个通知不仅仅是移动推送通知。三种类型的通知格式是：移动推送通知、SMS 消息和电子邮件。图 10-1 显示了这些通知中的每一种的例子。
理解问题并确定设计范围 构建一个每天发送数百万条通知的可扩展系统并不是一件容易的事。它需要对通知生态系统有深刻的理解。面试问题被特意设计成开放式和模糊不清的，你有责任提出问题来澄清需求。
应聘者：系统支持哪些类型的通知？面试官。推送通知，短信，和电子邮件。
应聘者：这是一个实时系统吗？
面试官：让我们说这是一个软实时系统。我们希望用户能尽快收到通知。但是，如果系统处于高负荷工作状态，稍有延迟是可以接受的。
应聘者：支持的设备有哪些？
面试官：iOS 设备，安卓设备，以及笔记本/台式机。
应聘者：什么会触发通知？
面试官：通知可以由客户端应用程序触发。也可以在服务器端安排。
应聘者：用户是否可以选择退出？
面试官：是的，选择退出的用户将不会再收到通知。
应聘者：每天有多少通知被发送出去？
面试官：1000 万条移动推送通知，100 万条短信，500 万封电子邮件。
提出高层次的设计并获得认同 本节展示了支持各种通知类型的高层设计：iOS 推送通知、Android 推送通知、SMS 消息和电子邮件。它的结构如下。
不同类型的通知 联系信息收集流程 通知的发送/接收流程 不同类型的通知 我们首先看一下每种通知类型在高层次上是如何工作的。
iOS 推送通知 我们主要需要三个组件来发送一个 iOS 推送通知。
提供者。提供者构建并向苹果推送通知服务（APNS）发送通知请求。为了构建一个推送通知，提供者提供以下数据。 设备令牌。这是一个用于发送推送通知的唯一标识符。 有效载荷。这是一个 JSON 字典，包含通知的有效载荷。下面是一个例子。 APNS：这是苹果提供的一个远程服务，用于向 iOS 设备传播推送通知。 iOS 设备。它是终端客户，接收推送通知。 Android 推送通知 Android 也采用了类似的通知流程。通常不使用 APN，而是使用 Firebase Cloud Messaging（FCM）来向安卓设备发送推送通知。
SMS 消息 对于 SMS 消息，通常使用第三方 SMS 服务，如 Twilio[1]、Nexmo[2]和其他许多服务。它们中的大多数是商业服务。
电子邮件 虽然公司可以建立自己的电子邮件服务器，但许多公司选择了商业电子邮件服务。Sendgrid[3]和 Mailchimp[4]是最受欢迎的电子邮件服务之一，它们提供了更好的发送率和数据分析。
图 10-6 显示了包括所有第三方服务后的设计。</description></item><item><title>系统设计::设计网络爬虫</title><link>/system_design/system_design_interview_09/</link><pubDate>Tue, 09 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_09/</guid><description>设计网页爬虫 在这一章中，我们重点讨论网络爬虫设计：一个有趣的、经典的系统设计面试问题。
网络爬虫被称为机器人或蜘蛛。它被搜索引擎广泛用于发现网络上新的或更新的内容。内容可以是一个网页、一张图片、一段视频、一个 PDF 文件，等等。网络爬虫从收集一些网页开始，然后跟踪这些网页上的链接来收集新内容。图 9-1 显示了爬虫过程的一个直观例子。
爬虫有许多用途。
搜索引擎的索引。这是最常见的使用情况。爬虫收集网页，为搜索引擎创建一个本地索引。例如，Googlebot 是 Google 搜索引擎背后的网络爬虫。 网络归档。这是一个从网络上收集信息的过程，以保存数据供将来使用。例如，许多国家图书馆运行爬虫来存档网站。著名的例子是美国国会图书馆[1]和欧盟的网络档案[2]。 网络挖掘。网络的爆炸性增长为数据挖掘提供了前所未有的机会。网络挖掘有助于从互联网上发现有用的知识。例如，顶级金融公司使用爬虫下载股东会议和年度报告，以了解公司的关键举措。 网络监控。爬虫有助于监测互联网上的版权和商标侵权行为。例如，Digimarc[3]利用爬虫来发现盗版作品和报告。 开发一个网络爬虫的复杂性取决于我们打算支持的规模。它可以是一个小型的学校项目，只需要几个小时就能完成，也可以是一个巨大的项目，需要一个专门的工程团队不断改进。因此，我们将在下面探讨要支持的规模和功能。
理解问题并确定设计范围 网络爬虫的基本算法很简单。
给定一组 URLs，下载所有由 URLs 寻址的网页。 从这些网页中提取 URLs 将新的 URL 添加到要下载的 URL 列表中。重复这 3 个步骤。 网络爬虫的工作是否真的像这种基本算法一样简单？并非如此。设计一个巨大的可扩展的网络爬虫是一项极其复杂的任务。任何人都不可能在面试时间内设计出一个大规模的网络爬虫。在进入设计之前，我们必须问一些问题来了解需求并确定设计范围。
候选人:爬虫的主要目的是什么？是用于搜索引擎索引、数据挖掘，还是其他？
面试官:搜索引擎索引。
应聘者:网络爬虫每月能收集多少个网页？
面试官:10 亿个网页。
应聘者:包括哪些内容类型？只包括 HTML，还是包括其他内容类型，如 PDF 和图片？
面试官:只包括 HTML。
应聘者:我们应该考虑新增加的或编辑过的网页吗？
面试官:是的，我们应该考虑新添加或编辑过的网页。
应聘者:我们是否需要存储从网上抓取的 HTML 网页？
面试官:需要。是的，最多 5 年。
应聘者:我们如何处理有重复内容的网页？
面试官:有重复内容的页面应该被忽略。
以上是一些你可以问面试官的样本问题。理解需求并澄清含糊不清的地方是很重要的。即使你被要求设计一个简单的产品，如网络爬虫，你和你的面试官也可能有不同的假设。
除了与面试官澄清功能外，记下一个好的网络爬虫的以下特点也很重要。
可伸缩。网络是非常大的。那里有数十亿的网页。网络爬虫应该使用并行化技术，效率极高。 健壮性。网络中充满了陷阱。坏的 HTML、无反应的服务器、崩溃、恶意链接等都很常见。爬虫器必须处理所有这些边缘情况。 礼貌性。爬虫不应该在很短的时间间隔内向一个网站发出过多的请求。 可扩展性。该系统是灵活的，因此需要最小的变化来支持新的内容类型。例如，如果我们想在将来抓取图像文件，我们应该不需要重新设计整个系统。 粗略估计 下面的估计是基于许多假设，与面试官沟通以保持一致是很重要的。
假设每个月有 10 亿个网页被下载。 QPS：1,000,000,000 / 30 天 / 24 小时 / 3600 秒 =~ 400 页/秒。 峰值 QPS = 2 * QPS = 800 假设平均网页大小为 500k。 10 亿页 x 500k = 每月 500TB 存储量。如果你对数字存储单位不清楚，可以再看一下第二章的 &amp;ldquo;2 的力量&amp;quot;部分。 假设数据存储 5 年，500TB * 12 个月 * 5 年 = 30PB。储存五年的内容需要一个 30PB 的存储。 提出高层次的设计并获得认同 一旦需求明确了，我们就开始进行高层设计。受以前关于网络抓取的研究[4][5]的启发，我们提出了一个高层设计，如图 9-2 所示。</description></item><item><title>系统设计::设计短链接</title><link>/system_design/system_design_interview_08/</link><pubDate>Mon, 08 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_08/</guid><description>设计短链接 在这一章中，我们将解决一个有趣而经典的系统设计面试问题：设计一个像 tinyurl 一样的短链接务。
了解问题并确定设计范围 系统设计面试的问题是故意留有余地的。为了设计出一个精心设计的系统，关键是要问清楚问题。
应聘者：你能举个例子说明短链接的工作原理吗？
面试官：假设 URL https://www.systeminterview.com/q=chatsystem&amp;amp;c=loggedin&amp;amp;v=v3&amp;amp;l=long 是原始的 URL。你的服务创建了一个长度更短的别名： https://tinyurl.com/y7keocwj 。如果你点击这个别名，它就会把你重定向到原来的网址。
应聘者：流量是多少？
面试官：每天有 1 亿个 URL 产生。
应聘者：缩短后的 URL 有多长？
面试官。越短越好。
应聘者：缩短后的 URL 允许有哪些字符？
面试官：缩短的 URL 可以是数字（0-9）和字符（a-z，A-Z）的组合。
应聘者：缩短后的 URL 可以删除或更新吗？
面试官：为简单起见，我们假设缩短的 URL 不能被删除或更新。
以下是基本的使用情况。
URL 缩短：给定一个长的 URL =&amp;gt; 返回一个短得多的 URL URL 重定向：给定一个较短的 URL =&amp;gt; 重定向到原来的 URL 高可用性、可扩展性和容错性考虑 粗略估计 写操作。每天产生 1 亿个 URL。 每秒写操作：1 亿/24/3600=1160 读取操作。假设读操作与写操作的比例为 10:1，每秒的读操作：1160 * 10 = 11,600 假设短链接服务将运行 10 年，这意味着我们必须支持 1 亿 * 365 * 10 = 3650 亿条记录。 假设平均 URL 长度为 100。 10 年内的存储需求。3650 亿 * 100 字节 * 10 年=365TB 重要的是，你要和你的面试官一起走过这些假设和计算，以便你们两个人达成共识。</description></item><item><title>系统设计::在分布式系统中设计一个唯一ID生成器</title><link>/system_design/system_design_interview_07/</link><pubDate>Sun, 07 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_07/</guid><description>在分布式系统中设计一个唯一 ID 生成器 在本章中，你被要求设计一个分布式系统中的唯一 ID 生成器。你的第一个想法可能是在传统的数据库中使用一个带有自动增加属性的主键。然而，auto_increment 在分布式环境中不起作用，因为单个数据库服务器不够大，以最小的延迟在多个数据库中生成唯一的 ID 是具有挑战性的。
这里有几个唯一 ID 的例子。
了解问题并确定设计范围 提出明确的问题是解决任何系统设计面试问题的第一步。下面是一个候选人与面试官互动的例子。
候选人：唯一 ID 的特点是什么？
面试官：ID 必须是唯一的，而且是可排序的。
候选者：对于每条新记录，ID 是否递增 1？
面试官：ID 按时间递增，但不一定只按 1 递增。在晚上创建的 ID 比同一天早上创建的 ID 要大。
候选人：ID 是否只包含数值？
面试官：是的，这是对的。
候选热：ID 的长度要求是什么？
面试官：ID 最长 64 位。
候选热：系统的规模是多少？
面试官：系统应该能够每秒生成 10,000 个 ID。
以上是一些你可以问面试官的样本问题。理解需求并澄清模糊之处非常重要。对于这个面试问题，要求列举如下。
ID 必须是唯一的。 ID 只能是数值。 IDs 最长 64 位的。 IDs 按日期排序。 有能力每秒产生超过 10,000 个唯一的 ID。 提出高层次的设计并获得认同 在分布式系统中，可以使用多种选项来生成唯一的 ID。我们考虑的选项是。
多主机复制 通用唯一标识符 UUID Ticket server Twitter Snowflake 让我们来看看他们中的每一个，他们是如何工作的，以及每个选项的优点/缺点。</description></item><item><title>系统设计::设计键值存储</title><link>/system_design/system_design_interview_06/</link><pubDate>Sat, 06 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_06/</guid><description>设计键值存储 键值存储，也被称为键值数据库，是一个非关系型数据库。每一个独特的标识符都被存储为一个带有相关值的键。这种数据配对被称为 &amp;ldquo;键-值&amp;quot;对。
在一个键值对中，键必须是唯一的，与键相关的值可以通过键来访问。key 可以是纯文本或散列值。出于性能方面的考虑，短键的效果更好。键是什么样子的？这里有几个例子。
普通文本 key：&amp;ldquo;last_logged_in_at&amp;rdquo; 哈希后的 key：253DDEC4 键值对中的值可以是字符串、列表、对象，等等。在键值存储中，值通常被视为不透明的对象，如 Amazon dynamo [1], Memcached [2], Redis [3], 等等。
下面是键值存储中的一个数据片段。
在本章中，要求你设计一个支持以下操作的键值存储。
- put(key, value) // 插入与 &amp;#34;key &amp;#34;相关的 &amp;#34;value&amp;#34;。 - get(key) // 获取与 &amp;#34;key &amp;#34;相关的 &amp;#34;value&amp;#34;。 理解问题并确定设计范围 没有完美的设计。每一个设计都要实现关于读、写和内存使用的权衡的具体平衡。另一个必须做出的权衡是在一致性和可用性之间。在本章中，我们设计了一个包括以下特征的键值存储。
一个键值对的大小很小：小于 10KB。 有能力存储大数据。 高可用性。系统响应迅速，即使在故障时也能响应。 高可扩展性。系统可以被扩展以支持大型数据集。 自动扩展。服务器的增加/删除应该是基于流量的自动。 可调整的一致性。 低延迟。 单个服务器键值存储 开发一个部署在单一服务器上的键值存储很容易。一个直观的方法是将键值对存储在一个哈希表中，这样可以将所有的东西保存在内存中。尽管内存访问速度很快，但由于空间的限制，在内存中容纳所有内容可能是不可能的。为了在单个服务器中容纳更多的数据，可以做两个优化。
数据压缩 只在内存中存储经常使用的数据，其余的存储在磁盘上。 即使进行了这些优化，单个服务器也会很快达到其容量。为了支持大数据，需要一个分布式的键值存储。
分布式键值存储 分布式键值存储也被称为分布式哈希表，它将键值对分布在许多服务器上。在设计分布式系统时，理解 CAP（一致性、可用性、分区容错）定理很重要。
CAP 定理 CAP 定理指出，一个分布式系统不可能同时提供这三种保证中的两种以上：一致性、可用性和分区容错。让我们建立几个定义。
一致性：一致性意味着所有客户在同一时间看到相同的数据，无论他们连接到哪个节点。 可用性：可用性意味着任何请求数据的客户端都能得到响应，即使有些节点发生了故障。 分区容错：分区表示两个节点之间的通信中断。分区容错意味着尽管网络分区，系统仍能继续运行。 CAP 定理指出，必须牺牲三个属性中的一个来支持三个属性中的两个，如图 6-1 所示。
现在，键值存储是根据它们支持的两个 CAP 特性来分类的。
CP（一致性和分区容忍）系统：CP 键值存储支持一致性和分区容忍，同时牺牲了可用性。 AP（可用性和分区容忍）系统：AP 键值存储支持可用性和分区容忍，同时牺牲了一致性。 CA（一致性和可用性）系统：CA 键值存储支持一致性和可用性，同时牺牲了分区容忍度。 由于网络故障是不可避免的，一个分布式系统必须容忍网络分区。因此，CA 系统不能存在于现实世界的应用中。</description></item><item><title>系统设计::设计一致性哈希</title><link>/system_design/system_design_interview_05/</link><pubDate>Fri, 05 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_05/</guid><description>设计一致性哈希 为了实现横向扩展，在服务器之间有效而均匀地分配请求/数据是很重要的。一致性哈希是实现这一目标的常用技术。但首先，让我们深入了解一下这个问题。
重哈希问题 如果你有 n 个缓存服务器，平衡负载的一个常用方法是使用下面的哈希方法。
serverIndex = hash(key) % N，其中 N 是服务器池的大小。
让我们用一个例子来说明它是如何工作的。如表 5-1 所示，我们有 4 个服务器和 8 个字符串 key 及其哈希值。
key hash hash %4 key0 18358617 1 key1 26143584 0 key2 18131146 2 key3 35863496 0 key4 34085809 1 key5 27581703 3 key6 38164978 2 key8 22530351 3 Table 5-1
为了获取存储 key 的服务器，我们执行模块化操作 f(key) % 4。例如，hash(key0) % 4 = 1 意味着客户端必须联系服务器 1 来获取缓存的数据。图 5-1 显示了基于表 5-1 的 key 的分布。</description></item><item><title>系统设计::设计一个限流器</title><link>/system_design/system_design_interview_04/</link><pubDate>Thu, 04 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_04/</guid><description>设计一个限流器 在网络系统中，限流器被用来控制客户端或服务所发送的流量速率。在 HTTP 世界中，限流器限制了允许在指定时间内发送的客户端请求的数量。如果 API 请求数超过了限流器定义的阈值，所有多余的调用都会被阻止。这里有几个例子。
一个用户每秒钟可以写不超过 2 个帖子。 你每天最多可以从同一个 IP 地址创建 10 个账户。 你每周从同一设备上领取奖励的次数不能超过 5 次。 在本章中，要求你设计一个限流器。在开始设计之前，我们首先看一下使用 API 限流器的好处。
防止由拒绝服务（DoS）攻击引起的资源饥饿。几乎所有大型科技公司发布的 API 都执行了某种形式的限流。例如，Twitter 将每 3 小时的推文数量限制为 300 条。Google docs APIs 有如下默认限制：每个用户每 60 秒读取请求 300 次。限流器通过阻止多余的调用来防止 DoS 攻击，无论是有意的还是无意的。 降低成本。限制多余的请求意味着更少的服务器和分配更多的资源分配给高优先级的 API。限流对于使用付费的第三方 API 的公司极为重要。例如，你对以下外部 API 的调用是按次数收费的：检查信用、付款、检索健康记录等。限制调用次数是降低成本的关键。 防止服务器过载。为了减少服务器的负荷，使用限流器来过滤掉由机器人或用户的不当行为造成的过多请求。 理解问题并确定设计范围 限流可以通过不同的算法来实现，每一种算法都有其优点和缺点。面试官和候选人之间的互动有助于澄清我们要建立的限流器的类型。
候选人：我们要设计什么样的限流器？是客户端的限流器还是服务器端的 API 限流器？
面试官：好问题。我们的重点是服务器端的 API 限流器。
候选人：限流器是根据 IP、用户 ID 还是其他属性来节制 API 请求？
面试官：限流器应该足够灵活，以支持不同的节流规则。
应聘者：系统的规模是多少？它是为初创公司还是拥有庞大用户群的大公司建立的？
面试官：系统必须能够处理大量的请求。
应聘者：系统能否在分布式环境中工作？
面试官：是的。
应聘者：限流器是一个单独的服务还是应该在应用程序代码中实现？
面试官：是的。这是一个由你决定的设计。
应聘者：我们是否需要通知那些被限制的用户？
面试官：是的。
需求:
以下是对该系统要求的总结。 准确地限制过多的请求。 低延时。限流器不应该减慢 HTTP 响应时间。 尽可能少地使用内存。 分布式限流。限流器可以在多个服务器或进程中共享。 异常处理。当用户的请求被节制时，向用户显示明确的异常。 高容错性。如果限流器有任何问题（例如，一个缓存服务器离线），它不会影响整个系统。 提出高层次的设计并获得认同 让我们保持简单，使用基本的客户和服务器模式进行通信。</description></item><item><title>系统设计::系统设计面试框架</title><link>/system_design/system_design_interview_03/</link><pubDate>Wed, 03 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_03/</guid><description>系统设计面试框架 你刚刚在你梦想中的公司获得了令人羡慕的现场面试机会。招聘协调员给你发了一份当天的时间表。扫视清单，你感觉很好，直到你的目光落在这个面试环节&amp;ndash;系统设计面试。
系统设计面试往往令人生畏。它可能像 &amp;ldquo;设计一个众所周知的产品 X？&amp;ldquo;一样模糊。问题模棱两可，看起来不合理地宽泛。你的疲惫是可以理解的。毕竟，怎么可能有人在一个小时内设计出一个流行的产品，而这个产品是花了几百个甚至几千个工程师才建成的？
好消息是，没有人期望你能做到。现实世界的系统设计是极其复杂的。例如，谷歌搜索具有欺骗性的简单性；然而，支撑这种简单性的技术数量确实令人吃惊。如果没有人期望你在一小时内设计出一个真实世界的系统，那么系统设计面试的好处是什么？
系统设计面试模拟了现实生活中的问题解决，两个同事合作解决一个模糊的问题，并提出一个符合他们目标的解决方案。这个问题是开放式的，没有完美的答案。与你在设计过程中付出的努力相比，最终的设计并不那么重要。这使你能够展示你的设计技能，为你的设计选择辩护，并以建设性的方式回应反馈。
让我们切换角度，考虑一下当面试官走进会议室与你见面时，她的脑子里在想什么。面试官的首要目标是准确评估你的能力。她最不希望的是，因为会议进行得不顺利，没有足够的信号，而给出一个没有结论的评价。面试官在系统设计面试中寻找的是什么？
许多人认为，系统设计面试是关于一个人的技术设计能力。它远不止于此。一个有效的系统设计面试给人以强烈的信号，表明一个人的合作能力，在压力下工作的能力，以及建设性地解决模糊性的能力。提出好问题的能力也是一项重要的技能，许多面试官专门寻找这种技能。
一个好的面试官也会寻找错误。过度工程化是许多工程师的一个真正的病症，因为他们喜欢设计的纯粹性，而忽视了权衡。他们往往没有意识到过度工程系统的复合成本，而许多公司为这种无知付出了高昂的代价。你当然不希望在系统设计面试中表现出这种倾向。其他的错误包括狭隘的心态、固执等等。
在这一章中，我们将讲述一些有用的技巧，并介绍一个简单而有效的框架来解决系统设计面试问题。
有效的系统设计面试的 4 个流程 每个系统设计面试都是不同的。一个好的系统设计面试是开放式的，没有一个放之四海而皆准的解决方案。然而，在每个系统设计面试中都有一些步骤和共同点。
理解问题并确定设计范围 &amp;ldquo;老虎为什么咆哮？&amp;rdquo;
班级后面有一只手举了起来。
&amp;ldquo;是的，吉米？&amp;quot;，老师回答。
&amp;ldquo;因为他很饿&amp;rdquo;。
&amp;ldquo;非常好，吉米&amp;rdquo;。
在整个童年时期，吉米一直是班上第一个回答问题的人。每当老师提出问题时，教室里总有一个孩子喜欢在问题上一试身手，不管他是否知道答案。这就是吉米。
吉米是一个王牌学生。他以能快速知道所有答案为荣。在考试中，他通常是第一个完成问题的人。在任何学术竞赛中，他都是老师的首选。
不要像吉米那样。
在系统设计面试中，不加思索地迅速给出答案不会给你加分。在没有彻底理解需求的情况下回答问题是一个巨大的错误，因为面试不是一个小游戏比赛。没有正确的答案。
所以，不要直接跳进去给出一个解决方案。慢下来。深入思考并提出问题以澄清需求和假设。这一点极为重要。
作为一个工程师，我们喜欢解决困难的问题并跳入最终的设计；然而，这种方法很可能导致你设计出错误的系统。作为一个工程师，最重要的技能之一是提出正确的问题，做出适当的假设，并收集建立一个系统所需的所有信息。因此，不要害怕提出问题。
当你提出问题时，面试官要么直接回答你的问题，要么要求你做出假设。如果是后者，请在白板或纸上写下你的假设。你以后可能会用到它们。
要问什么样的问题？提出问题以了解确切的要求。这里有一个问题清单，可以帮助你开始工作。 我们要建立什么具体的功能？ 该产品有多少用户？ 公司预计扩大规模的速度如何？3 个月、6 个月和 1 年后的预期规模是什么？ 该公司的技术栈是什么？你可以利用哪些现有的服务来简化设计？ 例子:
如果你被要求设计一个新闻源系统，你要问一些问题，帮助你澄清需求。你和面试官之间的对话可能是这样的。
候选人：这是一个移动应用程序吗？还是一个网络应用？或者两者都是？
面试官。都是。
应聘者：产品最重要的功能是什么？面试官。能够发帖并看到朋友的新闻提要。
应聘者：新闻源是按时间倒序还是按特定顺序排序的？特定顺序意味着每个帖子都有不同的权重。例如，来自你的亲密朋友的帖子比来自一个小组的帖子更重要。
采访者。为了简单起见，让我们假设 feed 是按逆时针顺序排序的。
候选人：一个用户可以有多少个朋友？面试官。5000
考生：流量是多少？面试官。1000 万日活跃用户（DAU）。
应聘者：饲料可以包含图片、视频，还是只有文字？
面试官：可以。它可以包含媒体文件，包括图片和视频。
以上是你可以问面试官的一些样本问题。理解要求并澄清含糊之处非常重要。
提出高层次的设计并获得认同 在这个步骤中，我们的目标是制定一个高层次的设计，并与面试官就设计达成一致。在这个过程中，与面试官合作是个好主意。
想出一个初步的设计蓝图。征求反馈意见。把你的面试官当作队友，一起工作。许多优秀的面试官喜欢交谈和参与。 在白板或纸上画出带有关键部件的方框图。这可能包括客户端（移动/网络）、API、网络服务器、数据存储、缓存、CDN、消息队列，等等。 做事后计算，评估你的蓝图是否符合规模限制。努力思考。在深入研究之前，如果有必要进行逆向计算，请与你的面试官沟通。 如果可能的话，通过一些具体的使用案例。这将帮助你确定高级设计的框架。也有可能这些用例会帮助你发现你还没有考虑过的边缘案例。
我们应该在这里包括 API 端点和数据库模式吗？这取决于问题的情况。对于像 &amp;ldquo;设计谷歌搜索引擎 &amp;ldquo;这样的大型设计问题，这有点太低级了。对于像为多人扑克游戏设计后端这样的问题，这是一个公平的游戏。与你的面试官沟通。
例子:
让我们用 &amp;ldquo;设计一个新闻源系统 &amp;ldquo;来演示如何进行高层设计。这里不要求你了解系统的实际工作情况。所有的细节将在第 11 章解释。
在高层次上，设计分为两个流程：Feed 发布和新闻源构建。 帖子发布：当用户发布帖子时，相应的数据被写入缓存/数据库，该帖子将被填充到朋友的新闻提要中。 新闻源构建：新闻源是通过将朋友的帖子按照逆时针顺序聚合起来而构建的。 图 3-1 和图 3-2 分别展示了新闻发布和新闻源构建流程的高级设计。</description></item><item><title>系统设计::粗略评估</title><link>/system_design/system_design_interview_02/</link><pubDate>Tue, 02 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_02/</guid><description>粗略评估 在系统设计面试中，有时你会被要求用粗略评估系统容量或性能要求。根据 Google 高级研究员 Jeff Dean 的说法，&amp;ldquo;粗略计算是你使用思想实验和常见的性能数字的组合来创建的估计，以很好地感觉到哪些设计可以满足你的要求&amp;rdquo;
你需要对可扩展性的基础知识有一个很好的感觉，以便有效地进行粗略计算。你需要好地理解以下概念：二的幂，每个程序员都应该知道的延迟数字，以及可用性数字。
2 的幂 尽管在处理分布式系统时，数据量可能变得巨大，但计算都可以归结为基础知识。为了获得正确的计算结果，关键是要知道使用 2 的幂的数据量单位。一个字节是一个 8 位的序列。一个 ASCII 字符使用一个字节的内存（8 比特）。下面是一个解释数据量单位的表格
Power Approximate value Full name Short name 10 1 Thousand 1 Kilobyte 1 KB 20 1 Million 1 Megabyte 1 MB 30 1 Billion 1 Gigabyte 1 GB 40 1 Trillion 1 Terabyte 1 TB 50 1 Quadrillion 1 Petabyte 1 PB 每个程序都应该知道的延迟数字 来自谷歌的 Dr.Dean 展示了 2010 年典型计算机操作的时间长度。随着计算机变得更快、更强大，有些数字已经过时了。然而，这些数字应该仍然能够让我们了解不同计算机操作的快慢。
Operation name Time L1 cache reference 0.</description></item><item><title>系统设计::从零到一百万</title><link>/system_design/system_design_interview_01/</link><pubDate>Mon, 01 Feb 2021 22:20:24 +0800</pubDate><guid>/system_design/system_design_interview_01/</guid><description>从零到一百万 设计一个支持数百万用户的系统是一个挑战，这是一个需要不断完善和无止境改进的历程。在本章中，我们将构建一个支持单个用户的系统，并逐步将其扩展到服务数百万用户。读完本章，你将掌握一手的技巧，帮助你破解系统设计的面试题。
单服务器设置
千里之行始于足下，构建一个复杂的系统也不例外。先从简单的东西开始，所有的东西都运行在一台服务器上。图 1-1 是单服务器设置的说明，所有的东西都在一台服务器上运行：Web 应用、数据库、缓存等。
为了理解这种设置，研究一下请求流程和流量来源是很有帮助的。我们先来看看请求流程（图 1-2）。
用户通过域名访问网站，如 api.mysite.com。通常，域名系统（DNS）是由第三方提供的付费服务，而不是由我们的服务器托管。 互联网协议（IP）地址返回给浏览器或移动应用。在本例中，返回的 IP 地址为 15.125.23.214。 获得 IP 地址后，超文本传输协议（HTTP）[1]请求直接发送到您的网络服务器。 Web 服务器返回 HTML 页面或 JSON 响应进行渲染。 接下来，我们来看看流量来源。你的 Web 服务器的流量来自两个方面：Web 应用和移动应用。
Web 应用：它使用服务器端语言（Java、Python 等）组合来处理业务逻辑、存储等，使用客户端语言（HTML 和 JavaScript）来进行展示。 移动应用。HTTP 协议是移动应用与 Web 服务器之间的通信协议。JavaScript 对象符号（JSON）由于其简单性，是常用的 API 响应格式来传输数据。JSON 格式的 API 响应示例如下所示。 { &amp;#34;firstName&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;lastName&amp;#34;: &amp;#34;Smith&amp;#34;, &amp;#34;address&amp;#34;: { &amp;#34;streetAddress&amp;#34;: &amp;#34;21 2nd street&amp;#34;, &amp;#34;city&amp;#34;: &amp;#34;New York&amp;#34;, &amp;#34;state&amp;#34;: &amp;#34;NY&amp;#34;, &amp;#34;postal Code&amp;#34;: 10021 }, &amp;#34;phoneNumbers&amp;#34;: [&amp;#34;212 555-1234&amp;#34;, &amp;#34;646 555-4567&amp;#34;] } GET /users/12 – Retrieve user object for id = 12</description></item></channel></rss>