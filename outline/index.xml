<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Outlines | Y.CH.Y</title>
    <link>/outline/</link>
      <atom:link href="/outline/index.xml" rel="self" type="application/rss+xml" />
    <description>Outlines</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Y.CH.Y</copyright>
    <item>
      <title></title>
      <link>/outline/distsys_outline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/outline/distsys_outline/</guid>
      <description>&lt;h1 id=&#34;分布式系统大纲&#34;&gt;分布式系统大纲&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;为什么需要分布式&#34;&gt;为什么需要分布式?&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;首先，在托管中心运行*nix 的盒子，进程通过 TCP 或者 UDP 通信。
&lt;ul&gt;
&lt;li&gt;或者 EC2, Rackspace 的盒子等等&lt;/li&gt;
&lt;li&gt;也许通过 InfiniBand 通信&lt;/li&gt;
&lt;li&gt;以短距离的局域网分割&lt;/li&gt;
&lt;li&gt;或者以数千公里互联网分割&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;许多移动应用也参与分布式系统
&lt;ul&gt;
&lt;li&gt;通过糟糕的网络进行通信
&lt;ul&gt;
&lt;li&gt;桌面 Web 浏览器也是如此&lt;/li&gt;
&lt;li&gt;这不仅仅是服务器 —— 它也是客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更一般地说，分布式系统具有如下特征
&lt;ul&gt;
&lt;li&gt;由交互的组件构成&lt;/li&gt;
&lt;li&gt;很慢&lt;/li&gt;
&lt;li&gt;不可靠&lt;/li&gt;
&lt;li&gt;无论那些对你意味着什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;还有：
&lt;ul&gt;
&lt;li&gt;飞机上的冗余 CPU&lt;/li&gt;
&lt;li&gt;ATM 和销售点终端&lt;/li&gt;
&lt;li&gt;太空探测器&lt;/li&gt;
&lt;li&gt;支付账单&lt;/li&gt;
&lt;li&gt;医生进行推荐&lt;/li&gt;
&lt;li&gt;醉酒的朋友试图通过短信制定计划&lt;/li&gt;
&lt;li&gt;每次商务会议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;节点和网络&#34;&gt;节点和网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们将分布式系统中的每个部分叫做 &lt;em&gt;节点&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;也称之为 &lt;em&gt;进程&lt;/em&gt;，&lt;em&gt;代理&lt;/em&gt;，&lt;em&gt;参与者&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;节点&#34;&gt;节点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;延迟特征
&lt;ul&gt;
&lt;li&gt;在一个节点内部的操作很快&lt;/li&gt;
&lt;li&gt;节点之间的操作很慢&lt;/li&gt;
&lt;li&gt;快和慢取决于系统的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;节点是可靠的
&lt;ul&gt;
&lt;li&gt;作为一个故障单元&lt;/li&gt;
&lt;li&gt;你知道什么时候发生问题&lt;/li&gt;
&lt;li&gt;状态是连贯的&lt;/li&gt;
&lt;li&gt;状态转换以优雅有序的方式进行&lt;/li&gt;
&lt;li&gt;典型的模型是某种类型的单线程状态机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;节点可以自己组成一个分布式系统
&lt;ul&gt;
&lt;li&gt;但只要该系统作为一个整体提供“快速，连贯”的操作，我们就可以将其视为单个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程模型
&lt;ul&gt;
&lt;li&gt;顺序进程通信模型&lt;/li&gt;
&lt;li&gt;Pi-演算&lt;/li&gt;
&lt;li&gt;Ambient 演算&lt;/li&gt;
&lt;li&gt;Actor 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;节点故障模型
&lt;ul&gt;
&lt;li&gt;故障停止 Crash-stop&lt;/li&gt;
&lt;li&gt;故障恢复 Crash-recover&lt;/li&gt;
&lt;li&gt;故障遗忘 Crash-amnesia&lt;/li&gt;
&lt;li&gt;拜占庭 Byzantine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;消息流通的网络&#34;&gt;消息流通的网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;节点通过网络交互
&lt;ul&gt;
&lt;li&gt;人类通过口头语言进行交互&lt;/li&gt;
&lt;li&gt;粒子通过磁场交互&lt;/li&gt;
&lt;li&gt;计算机通过 IP，TCP，UDP，SCTP 或者其它协议交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在节点之间发送的离散 &lt;em&gt;消息&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;消息需要 &lt;em&gt;时间&lt;/em&gt; 来传播
&lt;ul&gt;
&lt;li&gt;这是分布式系统中比较慢的部分&lt;/li&gt;
&lt;li&gt;我们称之为 &lt;em&gt;延迟&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息可能会丢失
&lt;ul&gt;
&lt;li&gt;这是分布式系统中另一个不可靠的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络几乎不会是同构的
&lt;ul&gt;
&lt;li&gt;一些连接比其它的连接速度更慢、带宽更小、更容易出错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;因果关系图&#34;&gt;因果关系图&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们可以将节点和网络交互表示为图表
&lt;ul&gt;
&lt;li&gt;时间从左到右或者从上到下表示&lt;/li&gt;
&lt;li&gt;节点是时间方向上的线（因为它们保持不动）&lt;/li&gt;
&lt;li&gt;消息通过倾斜的路径 &lt;em&gt;连接&lt;/em&gt; 节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步网络&#34;&gt;同步网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;节点以锁步方式执行：节点步骤之间的时间始终为 1&lt;/li&gt;
&lt;li&gt;消息延迟有限&lt;/li&gt;
&lt;li&gt;有效的完美的全球时钟&lt;/li&gt;
&lt;li&gt;易于证明的
&lt;ul&gt;
&lt;li&gt;你可能没有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;半同步网络&#34;&gt;半同步网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;像同步一样，但时钟只是近似的，例如在 [c，1]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;异步网络&#34;&gt;异步网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;独立执行，无论何时：步进时间在[0,1]中的任何位置&lt;/li&gt;
&lt;li&gt;无限制的消息延迟&lt;/li&gt;
&lt;li&gt;没有全球时钟&lt;/li&gt;
&lt;li&gt;比半同步或同步网络弱
&lt;ul&gt;
&lt;li&gt;意味着某些算法效率不高&lt;/li&gt;
&lt;li&gt;意味着某些算法是 &lt;em&gt;不可能的&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;参见例如 Attiya＆Mavronicolas，“半同步与异步网络的效率“&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP 网络肯定是异步的
&lt;ul&gt;
&lt;li&gt;但 &lt;em&gt;在实践中&lt;/em&gt; 真正的病态事情不会发生&lt;/li&gt;
&lt;li&gt;大多数网络在几秒到几周内恢复，而不是“从不”
&lt;ul&gt;
&lt;li&gt;相反，人类的时间尺度大约为几秒到几周&lt;/li&gt;
&lt;li&gt;所以我们不能臆想不存在的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;当网络出错时&#34;&gt;当网络出错时&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;异步网络允许
&lt;ul&gt;
&lt;li&gt;重复&lt;/li&gt;
&lt;li&gt;延迟&lt;/li&gt;
&lt;li&gt;丢失&lt;/li&gt;
&lt;li&gt;重排&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;丢失和延迟是很难区分的&lt;/li&gt;
&lt;li&gt;拜占庭网络被允许随意乱序
&lt;ul&gt;
&lt;li&gt;包括重写内容&lt;/li&gt;
&lt;li&gt;在真实的网络中几乎不会出现
&lt;ul&gt;
&lt;li&gt;大多数情况&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pagerduty.com/blog/the-discovery-of-apache-zookeepers-poison-packet/&#34;&gt;https://www.pagerduty.com/blog/the-discovery-of-apache-zookeepers-poison-packet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.vijayp.ca/linux-kernel-bug-delivers-corrupt-tcp-ip-data-to-mesos-kubernetes-docker-containers-4986f88f7a19&#34;&gt;https://tech.vijayp.ca/linux-kernel-bug-delivers-corrupt-tcp-ip-data-to-mesos-kubernetes-docker-containers-4986f88f7a19&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;底层协议&#34;&gt;底层协议&lt;/h2&gt;
&lt;h3 id=&#34;tcp&#34;&gt;TCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP &lt;em&gt;有效&lt;/em&gt; 。 用它。
&lt;ul&gt;
&lt;li&gt;不完美；你可以更快&lt;/li&gt;
&lt;li&gt;但你会知道什么时候是这种情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实际上，TCP 可以在单个 TCP 连接中防止重复和重新排序
&lt;ul&gt;
&lt;li&gt;但是你可能会打开多个连接&lt;/li&gt;
&lt;li&gt;如果没有其他原因，TCP 连接最终会失败&lt;/li&gt;
&lt;li&gt;当发生这种情况时，你可以 a）错过消息；b）重试&lt;/li&gt;
&lt;li&gt;您可以在 TCP 连接之上构建序列号来保证有序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp&#34;&gt;UDP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;与 TCP 相同的规则，但没有流的不变性&lt;/li&gt;
&lt;li&gt;很多人都希望 UDP “速度”
&lt;ul&gt;
&lt;li&gt;不要认为路由器和节点可以并且会随意丢弃数据包&lt;/li&gt;
&lt;li&gt;不要认为他们的包会被重复&lt;/li&gt;
&lt;li&gt;并重新排序&lt;/li&gt;
&lt;li&gt;“但至少它是公正的吗？”&lt;/li&gt;
&lt;li&gt;这会导致各种各样的混乱，例如，指标收集&lt;/li&gt;
&lt;li&gt;调试很难&lt;/li&gt;
&lt;li&gt;TCP 为您提供流量控制并将逻辑消息重新打包成数据包&lt;/li&gt;
&lt;li&gt;通过基于 UDP 的 TLS 很难&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 TCP 有限状态机开销过高的情况下，UDP 非常有用
&lt;ul&gt;
&lt;li&gt;内存压力&lt;/li&gt;
&lt;li&gt;复用大量短连接和套接字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在系统目标是尽力传输的场景下尤其有用
&lt;ul&gt;
&lt;li&gt;语音通话：人们会道歉并重复自己&lt;/li&gt;
&lt;li&gt;游戏：口吃和滞后，但后来会追上&lt;/li&gt;
&lt;li&gt;更高级别的协议对底层的混乱增加了可靠性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时钟&#34;&gt;时钟&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当一个系统被分割为独立的部分时，我们还期望对事件有某种类型的顺序&lt;/li&gt;
&lt;li&gt;时钟可以帮助我们排序：先是这个，然后是那个&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;墙上时钟&#34;&gt;墙上时钟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;理论上，操作系统的时钟为你提供了系统事件的部分顺序。
&lt;ul&gt;
&lt;li&gt;注意事项：NTP 可能没有你想象的那么好&lt;/li&gt;
&lt;li&gt;注意事项：节点之间的同步性并不好&lt;/li&gt;
&lt;li&gt;注意事项：硬件可以漂移
&lt;ul&gt;
&lt;li&gt;多份关于超微公司 TSC 导致系统时钟运行速度达到 26ms/s 的报告
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!search/Supermicro$20SYS-1029UX-LL1-S16$20system$20clock$20running$20too$20fast/mechanical-sympathy/oG9vLZVYjVA/DU-T9QpBAgAJ&#34;&gt;https://groups.google.com/forum/#!search/Supermicro$20SYS-1029UX-LL1-S16$20system$20clock$20running$20too$20fast/mechanical-sympathy/oG9vLZVYjVA/DU-T9QpBAgAJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事项：跨越几个世纪
&lt;ul&gt;
&lt;li&gt;NTP 不被关注&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rachelbythebay.com/w/2017/09/27/2153/&#34;&gt;http://rachelbythebay.com/w/2017/09/27/2153/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事项：NTP 依然可能将时钟向后跳动（默认：delta &amp;gt; 128 ms）。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eecis.udel.edu/~mills/ntp/html/clock.html&#34;&gt;https://www.eecis.udel.edu/~mills/ntp/html/clock.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事项：根据定义，POSIX 时间不是单调的
&lt;ul&gt;
&lt;li&gt;Cloudflare 2017 年。午夜 UTC 的闰秒意味着时间向后流动&lt;/li&gt;
&lt;li&gt;当前 Go 并没有提供对 CLOCK_MONOTONIC 的访问。&lt;/li&gt;
&lt;li&gt;计算出一个负的持续时间，然后将其送入 rand.int63n()，后者惊慌失措。&lt;/li&gt;
&lt;li&gt;导致 DNS 解析失败。1%的 HTTP 请求受到影响，持续数小时&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/&#34;&gt;https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意事项：你想测量的时间尺度可能无法实现&lt;/li&gt;
&lt;li&gt;注意事项：线程会休眠&lt;/li&gt;
&lt;li&gt;注意事项：运行时会休眠&lt;/li&gt;
&lt;li&gt;注意事项：操作系统会休眠&lt;/li&gt;
&lt;li&gt;注意事项：&amp;ldquo;硬件&amp;quot;会休眠&lt;/li&gt;
&lt;li&gt;注意事项：管理程序可以对你撒谎
&lt;ul&gt;
&lt;li&gt;在 15 分钟内有 16 秒以上的时间延迟！？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sandfox/32e749b5eac861c93f1bbeb8782ae8fd&#34;&gt;https://gist.github.com/sandfox/32e749b5eac861c93f1bbeb8782ae8fd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要使用&lt;/li&gt;
&lt;li&gt;至少操作系统的单调时钟是单调的，对吗？&lt;/li&gt;
&lt;li&gt;哦不: &lt;a href=&#34;https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src/libstd/time.rs#L201-L232&#34;&gt;https://github.com/rust-lang/rust/blob/eed12bcd0cb281979c4c9ed956b9e41fda2bfaeb/src/libstd/time.rs#L201-L232&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lamport-时钟&#34;&gt;Lamport 时钟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Lamport 1977：“时间，时钟和分布式系统中事件的排序”
&lt;ul&gt;
&lt;li&gt;每个进程一个时钟&lt;/li&gt;
&lt;li&gt;每个状态转换，时间单调递增： &lt;code&gt;t&#39;= t + 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包含在发送的每条消息中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&#39;= max(t，t_msg + 1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果我们有进程的全序，则我们可以对事件实现全序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;向量时钟&#34;&gt;向量时钟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将 Lamport 时钟推广到所有进程时钟的向量&lt;/li&gt;
&lt;li&gt;t_i&#39;= max(t_i, t_msg_i)&lt;/li&gt;
&lt;li&gt;对于每个操作，在向量中增加该进程的时钟&lt;/li&gt;
&lt;li&gt;提供部分因果顺序
&lt;ul&gt;
&lt;li&gt;A &amp;lt; B 当且仅当所有 A_i &amp;lt;= B_i，并且至少一个 A_i &amp;lt; B_i&lt;/li&gt;
&lt;li&gt;具体而言，给定一对事件，我们可以确定因果关系
&lt;ul&gt;
&lt;li&gt;B 的因是 A，则意味着 A &amp;lt; B&lt;/li&gt;
&lt;li&gt;A 的因是 B，则意味着 B &amp;lt; A&lt;/li&gt;
&lt;li&gt;否则独立&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;务实地：过去是共享的; 现在是独立的
&lt;ul&gt;
&lt;li&gt;只有“现在”，需要保留独立状态&lt;/li&gt;
&lt;li&gt;祖先状态可以被丢弃&lt;/li&gt;
&lt;li&gt;让我们对过去做垃圾收集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;空间：O（进程数）
&lt;ul&gt;
&lt;li&gt;对于 GC 需要协调&lt;/li&gt;
&lt;li&gt;或者牺牲正确性并修剪旧的 vclock 条目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变种
&lt;ul&gt;
&lt;li&gt;虚线版本矢量 - 用于客户端/服务器系统，对更多的事件排序&lt;/li&gt;
&lt;li&gt;区间树时钟 - 用于进程进入和离开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gps-和原子钟&#34;&gt;GPS 和原子钟&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比 NTP 好
&lt;ul&gt;
&lt;li&gt;毫秒精度的全球分布的全序&lt;/li&gt;
&lt;li&gt;将异步网络提升为半同步网络&lt;/li&gt;
&lt;li&gt;解锁更高效的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当前只有 Google 有这个能力
&lt;ul&gt;
&lt;li&gt;Spanner：全球分布的强一致事务&lt;/li&gt;
&lt;li&gt;并且他们不共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比你想要的要贵
&lt;ul&gt;
&lt;li&gt;每个 GPS 几百个接受者&lt;/li&gt;
&lt;li&gt;原子钟用于本地的正确性： 很多钱&lt;/li&gt;
&lt;li&gt;需要多个类型的 GPS：供应商可能会出错
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rachelbythebay.com/w/2015/09/07/noleap/&#34;&gt;https://rachelbythebay.com/w/2015/09/07/noleap/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;混乱的供应商确认框，它将 UTC 校正应用于 GPS 时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我不知道是谁在做这件事，但我敢打赌数据中心未来将为有限精度时间提供专用的硬件接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回顾&#34;&gt;回顾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们已经介绍了分布式系统的基本原理。节点通过网络交换消息，节点和网络都可能以各种方式失败。TCP 和 UDP 等协议为我们提供了原始信道通信流程，我们可以使用时钟排序时间。现在，我们会讨论分布式系统的一些高级 &lt;em&gt;属性&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可用性&#34;&gt;可用性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可用性基本上是尝试成功操作的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完全可用&#34;&gt;完全可用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原始想法：每次操作都成功&lt;/li&gt;
&lt;li&gt;一致性：非故障节点上的每个操作都成功
&lt;ul&gt;
&lt;li&gt;您无法对故障节点做任何事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;粘性可用&#34;&gt;粘性可用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于非故障节点每次操作都成功
&lt;ul&gt;
&lt;li&gt;约束：客户端总是可以和相同的节点交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高可用&#34;&gt;高可用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最好，如果系统没有被分布。&lt;/li&gt;
&lt;li&gt;例如 容忍多达 f 次失败，但不能再多&lt;/li&gt;
&lt;li&gt;也许有些操作失败了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多数可用&#34;&gt;多数可用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果操作的节点可以跟集群中的多数通信，则操作可以成功&lt;/li&gt;
&lt;li&gt;操作少数节点会失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;量化可用性&#34;&gt;量化可用性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们谈论了很多 &lt;em&gt;运行时间&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;如果没有人用，系统是运行的吗？&lt;/li&gt;
&lt;li&gt;在高峰时期会比宕机更差吗？&lt;/li&gt;
&lt;li&gt;可以 “在时间窗口内满足的请求的比例” 做衡量&lt;/li&gt;
&lt;li&gt;然后在不同时间在窗口上绘制该比例&lt;/li&gt;
&lt;li&gt;时间刻度会影响报告的正常运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apdex
&lt;ul&gt;
&lt;li&gt;不是所有的成功都是等价的&lt;/li&gt;
&lt;li&gt;将操作分为“好，“乏味”和“糟糕”&lt;/li&gt;
&lt;li&gt;Apdex = P(OK) + P(meh) / 2&lt;/li&gt;
&lt;li&gt;再次，可以每年报告
&lt;ul&gt;
&lt;li&gt;我们实现了 99.999 apdex 在这一年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并且在更精细的时间尺度上！
&lt;ul&gt;
&lt;li&gt;“用户服务的 Apdex 刚下降到 0.5;页面操作！”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理想情况：您的服务提供的整体很好？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一致性&#34;&gt;一致性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一致性模型是系统中事件的“安全”历史集&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单调读&#34;&gt;单调读&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一旦我读取了一个值，任何后续读取都将返回该状态或以后的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单调写&#34;&gt;单调写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果进行写操作，所做的任何后续写操作都将在第一次写入后的值上写入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;读自己&#34;&gt;读自己&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一旦一个值写入后，任何后续的读取都会返回写入的值（或者后续的值）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写后读&#34;&gt;写后读&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一旦一个值被读取，后续的写入只会在读取后的位置进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;串行化&#34;&gt;串行化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有的操作（事务）都是原子执行的&lt;/li&gt;
&lt;li&gt;以某种顺序
&lt;ul&gt;
&lt;li&gt;对顺序没有限制&lt;/li&gt;
&lt;li&gt;例如可以从过去的历史读取也没有问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;因果一致性&#34;&gt;因果一致性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;假设操作可以由 DAG 因果关系连接
&lt;ul&gt;
&lt;li&gt;例如，读取之后的写入与因果关系有关
&lt;ul&gt;
&lt;li&gt;假设进程不只是丢弃读取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;该 DAG 中未连接的操作是 &lt;em&gt;并发的&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;约束：在进程可以执行操作之前，所有之前的操作已经在该节点上执行&lt;/li&gt;
&lt;li&gt;并发操作可以自由重新排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;顺序一致性&#34;&gt;顺序一致性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;跟因果一致性类似，限制了可能的顺序&lt;/li&gt;
&lt;li&gt;所有操作必须原子执行&lt;/li&gt;
&lt;li&gt;所有进程对操作的顺序达成一致
&lt;ul&gt;
&lt;li&gt;对于一个进程而言，操作总是按顺序出现&lt;/li&gt;
&lt;li&gt;但是节点可以落后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线性化&#34;&gt;线性化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有操作必须原子执行&lt;/li&gt;
&lt;li&gt;每个进程对操作顺序达成一致&lt;/li&gt;
&lt;li&gt;每个操作必须在调用和完成时间之间进行&lt;/li&gt;
&lt;li&gt;实时性，玩不的约束可以让我们构建强壮的系统&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;acid-隔离级别&#34;&gt;ACID 隔离级别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ANSI SQL 的 ACID 隔离级别是很奇怪的
&lt;ul&gt;
&lt;li&gt;基本上是已有厂商实现的效果&lt;/li&gt;
&lt;li&gt;规范中的定义含糊不清&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pmg.csail.mit.edu/papers/adya-phd.pdf&#34;&gt;Adya 1999：Weak Consistency: A Generalized Theory and Optimistic Implementations for Distributed Transactions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;每个 ANSI SQL 隔离级别都禁止出现奇怪的现象&lt;/li&gt;
&lt;li&gt;读未提交
&lt;ul&gt;
&lt;li&gt;防止 P0：脏写
&lt;ul&gt;
&lt;li&gt;w1(x) &amp;hellip; w2(x)&lt;/li&gt;
&lt;li&gt;在提交之前，无法覆盖其他事务的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在事务仍在修改时可以读取数据&lt;/li&gt;
&lt;li&gt;可以读取即将回滚的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读已提交
&lt;ul&gt;
&lt;li&gt;防止 P1：脏读
&lt;ul&gt;
&lt;li&gt;w1(x) &amp;hellip; r2(x)&lt;/li&gt;
&lt;li&gt;不能读取一个事务未提交的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可重复读
&lt;ul&gt;
&lt;li&gt;防止 P1：模糊读 (update)
&lt;ul&gt;
&lt;li&gt;r1(x) &amp;hellip; w2(x)&lt;/li&gt;
&lt;li&gt;一旦一个事务读取到一个值，事务在提交之前都不能变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;串行化
&lt;ul&gt;
&lt;li&gt;防止 P3：幻读 (select id &amp;lt; 2 from t; insert into t values(1);)
&lt;ul&gt;
&lt;li&gt;给出一些条件 P&lt;/li&gt;
&lt;li&gt;r1(x) &amp;hellip; w2(y in P)&lt;/li&gt;
&lt;li&gt;一旦读取了满足查询条件的集合，这个集合不能变化，直到事务提交&lt;/li&gt;
&lt;li&gt;不仅仅是值，是那些会参与到集合中的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;游标稳定
&lt;ul&gt;
&lt;li&gt;事务有一个游标的集合
&lt;ul&gt;
&lt;li&gt;一个游标引用一个事务访问的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持有读锁，直到游标被释放或者提交
&lt;ul&gt;
&lt;li&gt;在提交的时，游标被升级为写锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;防止丢失更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快照隔离
&lt;ul&gt;
&lt;li&gt;事务总是从已经提交的快照读取数据，快照从事务开始时获取&lt;/li&gt;
&lt;li&gt;仅当没有其他具有重叠[start..commit]间隔的已提交事务已写入我们编写的任何对象时，才会发生提交
&lt;ul&gt;
&lt;li&gt;第一个提交者成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;这实际上有什么关系吗&#34;&gt;这实际上有什么关系吗？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;真实世界并不是那样并发的&lt;/li&gt;
&lt;li&gt;很多公司选择读已提交&lt;/li&gt;
&lt;li&gt;但恶意攻击者可以诱导并发
&lt;ul&gt;
&lt;li&gt;Flexcoin
&lt;ul&gt;
&lt;li&gt;比特币交换，允许用户通过在账户之间进行混洗来创造资金&lt;/li&gt;
&lt;li&gt;2014 年遭遇袭击，365,000 英镑被盗&lt;/li&gt;
&lt;li&gt;交易所完全崩溃了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Poloniex
&lt;ul&gt;
&lt;li&gt;并发提款被错误地隔离，允许用户超支&lt;/li&gt;
&lt;li&gt;安全审核未发现负余额&lt;/li&gt;
&lt;li&gt;12.3％的外汇资金被盗; 损失在用户之间传播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bailis.org/papers/acidrain-sigmod2017.pdf&#34;&gt;Warszawski＆Bailis 2017：ACIDrain&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;自动识别 Web 应用程序中的一致性违规&lt;/li&gt;
&lt;li&gt;例如 购买一张礼品卡，然后无限次使用&lt;/li&gt;
&lt;li&gt;例如 购买笔，在结账时添加笔记本电脑到购物车，获得免费的笔记本电脑&lt;/li&gt;
&lt;li&gt;超过 50％的电子商务网站中都存在漏洞
&lt;ul&gt;
&lt;li&gt;弱 DB 隔离默认值&lt;/li&gt;
&lt;li&gt;事务范围的不当使用&lt;/li&gt;
&lt;li&gt;未能使用任何事务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chadscira.com/post/5fa269d46142ac544e013d6e/DISCLOSURE-Unlimited-Chase-Ultimate-Rewards-Points&#34;&gt;Chase Bank&amp;rsquo;s credit card rewards system&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;余额之间的并发转账获得了价值 70000 美金的旅行券&lt;/li&gt;
&lt;li&gt;现金可以赎回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;权衡&#34;&gt;权衡&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;理想情况下，我们需要完全可用性和线性化&lt;/li&gt;
&lt;li&gt;一致性需要协调
&lt;ul&gt;
&lt;li&gt;如果允许每个顺序，我们不需要做任何工作！&lt;/li&gt;
&lt;li&gt;如果我们想要禁止某些事件顺序，我们必须交换消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调（通常）都有代价
&lt;ul&gt;
&lt;li&gt;更多的一致性更慢&lt;/li&gt;
&lt;li&gt;更多的一致性更直观&lt;/li&gt;
&lt;li&gt;更多的一致性更少的可用性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可用性和一致性&#34;&gt;可用性和一致性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CAP 理论：线性化或者完全可用&lt;/li&gt;
&lt;li&gt;但是等等，这里还有更多！&lt;/li&gt;
&lt;li&gt;Bailis 2014：Highly Available Transactions: Virtues and Limitations&lt;/li&gt;
&lt;li&gt;其他理论不允许完全可用或粘性可用&amp;hellip;&amp;hellip;
&lt;ul&gt;
&lt;li&gt;强串行化&lt;/li&gt;
&lt;li&gt;串行化&lt;/li&gt;
&lt;li&gt;可重复读&lt;/li&gt;
&lt;li&gt;游标稳定&lt;/li&gt;
&lt;li&gt;快照隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以粘性可用&amp;hellip;
&lt;ul&gt;
&lt;li&gt;因果关系&lt;/li&gt;
&lt;li&gt;PRAM&lt;/li&gt;
&lt;li&gt;读你的写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以完全可用&amp;hellip;
&lt;ul&gt;
&lt;li&gt;读未提交&lt;/li&gt;
&lt;li&gt;读已提交&lt;/li&gt;
&lt;li&gt;单调原子视图&lt;/li&gt;
&lt;li&gt;写后读&lt;/li&gt;
&lt;li&gt;单调读&lt;/li&gt;
&lt;li&gt;单调写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;收获与收益&#34;&gt;收获与收益&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fox &amp;amp; Brewer, 1999: Harvest, Yield, and Scalable Tolerant Systems&lt;/li&gt;
&lt;li&gt;收益：请求完成的概率&lt;/li&gt;
&lt;li&gt;收获：响应中反映的数据部分&lt;/li&gt;
&lt;li&gt;例子
&lt;ul&gt;
&lt;li&gt;搜索引擎中的节点故障可能导致某些结果丢失&lt;/li&gt;
&lt;li&gt;更新可能反映在某些节点上，但不反映在其他节点上
&lt;ul&gt;
&lt;li&gt;考虑一个被分区的 AP 系统&lt;/li&gt;
&lt;li&gt;你可以写入数据一些人不能读取到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流式视频降级以保持低延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这不是违反安全不变量的借口
&lt;ul&gt;
&lt;li&gt;只是帮助您量化您可以 &lt;em&gt;超过&lt;/em&gt; 安全不变量的数量&lt;/li&gt;
&lt;li&gt;例如，99%时间，你可以读取到前面 90%的写入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;强依赖负载，硬件，拓扑，等&lt;/li&gt;
&lt;li&gt;可以根据每个请求调整收获与收益&lt;/li&gt;
&lt;li&gt;尽可能在 10ms 以内&lt;/li&gt;
&lt;li&gt;我需要一切，我理解你可能不会应答&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混合系统&#34;&gt;混合系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有一系列的选择
&lt;ul&gt;
&lt;li&gt;不同部分设施有不同的需求&lt;/li&gt;
&lt;li&gt;选择可以满足你的约束最弱的模型
&lt;ul&gt;
&lt;li&gt;但是考虑概率界限，可见性延迟可能会令人望而却步&lt;/li&gt;
&lt;li&gt;请参阅 Dynamo Quorums 中的概率有界陈旧性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不是所有的数据都是一样的
&lt;ul&gt;
&lt;li&gt;大数据通常不是很重要&lt;/li&gt;
&lt;li&gt;小数据通常很重要&lt;/li&gt;
&lt;li&gt;线性化用户的操作，因果关一致性社交信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;回顾-1&#34;&gt;回顾&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可用性衡量运营成功的频率。 一致性模型是管理可能发生的操作以及何时发生的规则。 更强的一致性模型通常以性能和可用性为代价。 接下来，我们将讨论构建系统的不同方法，从弱到强一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;尽可能避免共识&#34;&gt;尽可能避免共识&lt;/h2&gt;
&lt;h3 id=&#34;calm-猜想&#34;&gt;CALM 猜想&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Consistency As Logical Monotonicity
&lt;ul&gt;
&lt;li&gt;如果你可以证明一个系统是逻辑单调的，则不需要协调&lt;/li&gt;
&lt;li&gt;什么是“协调”？&lt;/li&gt;
&lt;li&gt;什么是“单调”？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单调性，非正式的，是不会回退的
&lt;ul&gt;
&lt;li&gt;从部分信息推论永远不会因为新信息而无效&lt;/li&gt;
&lt;li&gt;没有否定的关系代数和 Datalog 是单调的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ameloot, et al, 2011: Relational transducers for declarative networking
&lt;ul&gt;
&lt;li&gt;理论上，不知道网络范围的无协调网络进程只能计算 Datalog 中的单调查询
&lt;ul&gt;
&lt;li&gt;这读起来不容易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无协调并不意味着没有通信
&lt;ul&gt;
&lt;li&gt;即使面对任意水平分区，算法也能成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用非常宽松的实际术语
&lt;ul&gt;
&lt;li&gt;尝试说明您的问题，以便您只 &lt;em&gt;向系统添加&lt;/em&gt; 新的事实&lt;/li&gt;
&lt;li&gt;当您根据当前已知的事物计算新事实时，您是否可以确保永远不会撤回事实？&lt;/li&gt;
&lt;li&gt;考虑特殊的“密封事实”，将一系列事实标记为完整&lt;/li&gt;
&lt;li&gt;这些“仅增长”算法通常更容易实现&lt;/li&gt;
&lt;li&gt;可能的权衡：不完整的读取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bloom 语言
&lt;ul&gt;
&lt;li&gt;带流分析的无序编程&lt;/li&gt;
&lt;li&gt;可以告诉你哪里要协调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gossip&#34;&gt;Gossip&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;消息广播系统&lt;/li&gt;
&lt;li&gt;对于集群管理、服务发现、健康、传感器、CDN 等很有用&lt;/li&gt;
&lt;li&gt;通用的若一致性/高可用&lt;/li&gt;
&lt;li&gt;全球广播
&lt;ul&gt;
&lt;li&gt;发送消息给每个其它节点&lt;/li&gt;
&lt;li&gt;O(节点数)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网状网络
&lt;ul&gt;
&lt;li&gt;流行病模型&lt;/li&gt;
&lt;li&gt;与邻居接力&lt;/li&gt;
&lt;li&gt;传播时间按最大自由路径的顺序排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生成森林
&lt;ul&gt;
&lt;li&gt;替代网络，使用树&lt;/li&gt;
&lt;li&gt;跳到连接节点，该节点继续连接到其他连接节点&lt;/li&gt;
&lt;li&gt;减少多余的消息&lt;/li&gt;
&lt;li&gt;减少时延&lt;/li&gt;
&lt;li&gt;Plumtree (Leit ̃ao, Pereira, &amp;amp; Rodrigues, 2007: Epidemic Broadcast Trees)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Push-Sum 等
&lt;ul&gt;
&lt;li&gt;对您收到数据的每个人的输入求和&lt;/li&gt;
&lt;li&gt;将其广播到随机的同等节点&lt;/li&gt;
&lt;li&gt;最小值，最大值，平均值的扩展&lt;/li&gt;
&lt;li&gt;有助于实时指标，速率限制，路由，识别群集热点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;crdts&#34;&gt;CRDTs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无序的数据类型
&lt;ul&gt;
&lt;li&gt;计数器，集合，映射等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容忍欺骗，延迟和重新排序&lt;/li&gt;
&lt;li&gt;与顺序一致的系统不同，没有“单一的事实来源”&lt;/li&gt;
&lt;li&gt;但不像天真的最终一致的系统，永远不会丢失信息
&lt;ul&gt;
&lt;li&gt;除非你明确让他们丢失信息&lt;/li&gt;
&lt;li&gt;我们称这个属性为“合并”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在高可用系统中工作的很好
&lt;ul&gt;
&lt;li&gt;网页/移动客户端&lt;/li&gt;
&lt;li&gt;Dynamo&lt;/li&gt;
&lt;li&gt;Gossip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;INRIA: Shapiro, Preguiça, Baquero, Zawirski, 2011: &amp;ldquo;A comprehensive study of Convergent and Commutative Replicated Data Types&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;由数据类型 X 和合并函数 m 组成，是：
&lt;ul&gt;
&lt;li&gt;关联：m(x1, m(x2, x3)) = m(m(x1, x2), x3)&lt;/li&gt;
&lt;li&gt;交换：m(x1, x2) = m(x2, x1)&lt;/li&gt;
&lt;li&gt;幂等：m(x1, x1) = m(x1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容易构建。容易推理。 摆脱各种头痛的问题。
&lt;ul&gt;
&lt;li&gt;沟通失败了吗？ 重试！ 它会收敛！&lt;/li&gt;
&lt;li&gt;消息是否无序到达？ 没关系！&lt;/li&gt;
&lt;li&gt;如何同步两个副本？ 合并！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;有些算法 &lt;em&gt;需要&lt;/em&gt; 顺序，不能用 CRDT 表示&lt;/li&gt;
&lt;li&gt;读取可能是任意旧值&lt;/li&gt;
&lt;li&gt;更高的空间成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hats&#34;&gt;HATs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Bailis, Davidson, Fekete, et al, 2013: &amp;ldquo;Highly Available Transactions, Virtues and Limitations&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;从任何副本确保响应&lt;/li&gt;
&lt;li&gt;低延迟（比可序列化协议快 1-3 个数量级！）&lt;/li&gt;
&lt;li&gt;读已提交&lt;/li&gt;
&lt;li&gt;单调原子视图&lt;/li&gt;
&lt;li&gt;非常适用于可交换/单调系统&lt;/li&gt;
&lt;li&gt;多个项更新的外键约束&lt;/li&gt;
&lt;li&gt;有限的唯一性约束&lt;/li&gt;
&lt;li&gt;可以确保给定任意有限延迟的收敛（“最终一致性”）&lt;/li&gt;
&lt;li&gt;地理分布系统的良好候选&lt;/li&gt;
&lt;li&gt;可能最好与更强大的事务系统协调一致&lt;/li&gt;
&lt;li&gt;另见：COPS，Swift，Eiger，Calvin 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;需要共识怎么办&#34;&gt;需要共识，怎么办？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;共识问题
&lt;ul&gt;
&lt;li&gt;三种进程类型
&lt;ul&gt;
&lt;li&gt;提议者：提出一个值&lt;/li&gt;
&lt;li&gt;接受者：选择一个值&lt;/li&gt;
&lt;li&gt;学习者：读取选择的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接受者的分类
&lt;ul&gt;
&lt;li&gt;N 个接受者&lt;/li&gt;
&lt;li&gt;F 个允许失败&lt;/li&gt;
&lt;li&gt;M 个恶意的接受者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三个变体
&lt;ul&gt;
&lt;li&gt;非平凡性：只能学习提出的值&lt;/li&gt;
&lt;li&gt;安全性：最多可以学习一个值&lt;/li&gt;
&lt;li&gt;活跃性：如果一个提议者 p，一个学习者 l 和一组 N-F 各接受者没有错误并且可以相互通信，并且如果 p 提出一个值，则 l 最终将学习一个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统类型与共识问题等价
&lt;ul&gt;
&lt;li&gt;所以我们这里的任何证明也适用于那些系统&lt;/li&gt;
&lt;li&gt;锁服务&lt;/li&gt;
&lt;li&gt;排序的日志&lt;/li&gt;
&lt;li&gt;复制状态机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FLP 告诉我们不可能在异步网络中实现共识
&lt;ul&gt;
&lt;li&gt;在正确的时间杀死一个进程，你可以打破 &lt;em&gt;任何&lt;/em&gt; 共识算法&lt;/li&gt;
&lt;li&gt;是这样，但情况也不是你想的那样坏&lt;/li&gt;
&lt;li&gt;实际上，网络 &lt;em&gt;通常足以&lt;/em&gt; 达成共识&lt;/li&gt;
&lt;li&gt;此外，FLP 假设确定的进程
&lt;ul&gt;
&lt;li&gt;实际的计算机系统不是确定的&lt;/li&gt;
&lt;li&gt;Ben-Or 1983: &amp;ldquo;Another Advantage of free choice&amp;rdquo;
&lt;ul&gt;
&lt;li&gt;非确定性算法 &lt;em&gt;可以&lt;/em&gt; 达成共识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lamport 2002: tight bounds for asynchronous consensus
&lt;ul&gt;
&lt;li&gt;至少有两个提议者或一个恶意提议者，N &amp;gt; 2F + M
&lt;ul&gt;
&lt;li&gt;需要大多数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于至少 2 个提议者或一个恶意提议者，学习提案至少需要 2 个消息延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这是一个实用的可操作范围
&lt;ul&gt;
&lt;li&gt;在稳定的集群中，可以使用一次往返大多数节点的方式。&lt;/li&gt;
&lt;li&gt;群集转换期间需要更多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;paxos&#34;&gt;Paxos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Paxos 是共识算法的黄金标准
&lt;ul&gt;
&lt;li&gt;Lamport 1989 - The Part Time Parliament
&lt;ul&gt;
&lt;li&gt;对想象中的希腊民主的描述方式来写作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lamport 2001 - Paxos Made Simple
&lt;ul&gt;
&lt;li&gt;“用于实现容错分布式系统的 Paxos 算法一直被认为难以理解，也许是因为原始表示对于许多读者来说是希腊语[5]。事实上，它是最简单和最明显的分布式算法之一。 最后一节解释了完整的 Paxos 算法，它是通过直接应用协议来建立分布式系统的状态机方法得到的 - 这种方法应该是众所周知的，因为它是最可能的主题。 经常被引用的关于分布式系统理论的文章[4]。“&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Google 2007 - Paxos Made Live
&lt;ul&gt;
&lt;li&gt;来自谷歌锁服务 Chubby 的笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Van Renesse 2011 - Paxos Made Moderately Complex
&lt;ul&gt;
&lt;li&gt;事实证明你必须优化&lt;/li&gt;
&lt;li&gt;伪代码也会有所帮助&lt;/li&gt;
&lt;li&gt;一个伪代码页 -&amp;gt; 几千行 C ++&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就独立提案达成共识&lt;/li&gt;
&lt;li&gt;通常部署在多数仲裁中，5 或 7 个节点&lt;/li&gt;
&lt;li&gt;几个优化
&lt;ul&gt;
&lt;li&gt;Multi-Paxos&lt;/li&gt;
&lt;li&gt;Fast Paxos&lt;/li&gt;
&lt;li&gt;Generalized Paxos&lt;/li&gt;
&lt;li&gt;并不总是清楚使用哪种优化，哪些可以安全地组合&lt;/li&gt;
&lt;li&gt;每种实现都使用略有不同的风格&lt;/li&gt;
&lt;li&gt;Paxos 实际上更像是一系列算法，而不是一个描述良好的单一实体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用于各种生产系统
&lt;ul&gt;
&lt;li&gt;Chubby&lt;/li&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;Riak&lt;/li&gt;
&lt;li&gt;FoundationDB&lt;/li&gt;
&lt;li&gt;WANdisco SVN servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新研究：Paxos 法定人数不需要占多数：可以优化快速阶段 2 法定人数 &lt;a href=&#34;https://arxiv.org/abs/1608.06696&#34;&gt;Howard, Malkhi, and Spiegelman&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;我们还不确定如何使用它&lt;/li&gt;
&lt;li&gt;持久性仍然需要分发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;zab&#34;&gt;ZAB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ZAB 是 Zookeeper 原子广播协议&lt;/li&gt;
&lt;li&gt;Junqueira, Reed, and Serafini 2011 - Zab: High-performance broadcast for primary-backup systems&lt;/li&gt;
&lt;li&gt;与 Paxos 有区别&lt;/li&gt;
&lt;li&gt;提供顺序一致性（可线性化写入，滞后有序读取）
&lt;ul&gt;
&lt;li&gt;很有用，因为 ZK 客户端通常需要快速本地读取&lt;/li&gt;
&lt;li&gt;但是还有一个 SYNC 命令可以保证实时可见性&lt;/li&gt;
&lt;li&gt;（SYNC + op）允许线性化读取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仍然是多数派，5 个或者 7 个节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;humming-共识&#34;&gt;Humming 共识&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于管理分布式系统重新配置的元数据存储&lt;/li&gt;
&lt;li&gt;看起来有点像 CORFU 的复制日志&lt;/li&gt;
&lt;li&gt;另见：链式复制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;viewstamped-复制&#34;&gt;Viewstamped 复制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作为复制协议提供，但也是共识算法&lt;/li&gt;
&lt;li&gt;事务处理加视图变更算法&lt;/li&gt;
&lt;li&gt;保证多数达成的值可以将来继续生存&lt;/li&gt;
&lt;li&gt;我不知道任何生产系统，但我确定它们在那里&lt;/li&gt;
&lt;li&gt;与 Paxos 一起以某种方式影响了 Raft&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;raft&#34;&gt;Raft&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ongaro &amp;amp; Ousterhout 2014 - In Search of an Understandable Consensus Algorithm&lt;/li&gt;
&lt;li&gt;Lamport 说 Paxos 很容易，但我们仍然有各种问题
&lt;ul&gt;
&lt;li&gt;如果有一个我们可以理解的一致性算法怎么办？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当我们 &lt;em&gt;想要&lt;/em&gt; 是状态机时，Paxos 接近独立决策
&lt;ul&gt;
&lt;li&gt;改为维护状态机转换的复制 &lt;em&gt;日志&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;还构建了集群成员转换，这对于真实系统来说是关键&lt;/li&gt;
&lt;li&gt;非常新，但是我们有一个核心算法的 Coq 证明&lt;/li&gt;
&lt;li&gt;可用于顺序或可线性化的状态机
&lt;ul&gt;
&lt;li&gt;RethinkDB&lt;/li&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;li&gt;Consul&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务呢&#34;&gt;事务呢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;迭代共识使我们对单一的总操作顺序达成一致&lt;/li&gt;
&lt;li&gt;在 &lt;em&gt;可以&lt;/em&gt; 独立执行的事务之间进行不必要的阻塞&lt;/li&gt;
&lt;li&gt;我们如何提升性能？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aphyr.com/media/talks/2019/distributed-transaction-architectures.pdf&#34;&gt;Distributed Transaction Architectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;单个写操作
&lt;ul&gt;
&lt;li&gt;所有更新都要经过一个队列，读操作在快照上执行&lt;/li&gt;
&lt;li&gt;通常涉及某种持久性的数据结构&lt;/li&gt;
&lt;li&gt;串行化到严格串行化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datomic.com/on-prem/architecture.html&#34;&gt;Datomic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OK but multiple writers?&lt;/li&gt;
&lt;li&gt;多个写操作
&lt;ul&gt;
&lt;li&gt;一般来说，有几个分片，每个分片运行一个有共识支持的 FSM&lt;/li&gt;
&lt;li&gt;某种支持跨分片事务的协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;独立分片
&lt;ul&gt;
&lt;li&gt;A sort of halfway-step to general-purpose transactions&lt;/li&gt;
&lt;li&gt;一种为了通用事务的中间步骤&lt;/li&gt;
&lt;li&gt;不允许跨分片事务&lt;/li&gt;
&lt;li&gt;运行一堆独立的共识状态机&lt;/li&gt;
&lt;li&gt;Can add a single global consensus group for cross-shard transactions&lt;/li&gt;
&lt;li&gt;可以为跨分片事务加单个全局共识组
&lt;ul&gt;
&lt;li&gt;虽然吞吐量有限！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.voltdb.com/UsingVoltDB/IntroHowVoltDBWorks.php&#34;&gt;VoltDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/36726.pdf&#34;&gt;Percolator&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;基于线性分片的快照隔离&lt;/li&gt;
&lt;li&gt;时间戳 Oracle 分配连续事务时间戳（使用共识）&lt;/li&gt;
&lt;li&gt;读时间戳，从领导者读，预写, 提交时间戳，提交, 完成&lt;/li&gt;
&lt;li&gt;14 个网络跳跃，可能都是跨数据中心的&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tikv.org/deep-dive/distributed-transaction/percolator/&#34;&gt;TiDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&#34;&gt;Spanner&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;外部一致性&amp;rdquo; (严格串行化？)&lt;/li&gt;
&lt;li&gt;通过使用 GPS 和原子钟加速时间戳分配&lt;/li&gt;
&lt;li&gt;基本上是基于 paxos 组的两阶段提交
&lt;ul&gt;
&lt;li&gt;Locks on Paxos leaders&lt;/li&gt;
&lt;li&gt;在 Paxos 领导上加锁&lt;/li&gt;
&lt;li&gt;选取一个 paxos 组为整个事务提交记录提供服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;固定延迟底线保证时间戳单调性&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.yugabyte.com/distributed-postgresql-on-a-google-spanner-architecture-storage-layer/&#34;&gt;Yugabyte DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cockroachlabs.com/guides/cockroachdb-the-resilient-geo-distributed-sql-database-sigmod-2020/&#34;&gt;CockroachDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf&#34;&gt;Calvin&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Order transactions in a log using consensus&lt;/li&gt;
&lt;li&gt;使用共识算法在日志中记录订单交易&lt;/li&gt;
&lt;li&gt;分片日志为了提高到任意高的吞吐&lt;/li&gt;
&lt;li&gt;定期关闭志窗口并将事务应用到分片&lt;/li&gt;
&lt;li&gt;应用程序不需要沟通！&lt;/li&gt;
&lt;li&gt;严格串性化&lt;/li&gt;
&lt;li&gt;1 次数据中心间往返，更多本地通信跳数&lt;/li&gt;
&lt;li&gt;可扩展的吞吐量&lt;/li&gt;
&lt;li&gt;最低延迟底线&lt;/li&gt;
&lt;li&gt;事务必须是纯粹的，预先声明&lt;/li&gt;
&lt;li&gt;可以与协议的扩展进行交互&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fauna.com/&#34;&gt;Fauna&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回顾-2&#34;&gt;回顾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只添加而不是收回的系统需要较少的协调就能构建。我们可以使用 gossip 系统向其他进程广播消息，CRDT 用于合并来自对端的更新，以及用于弱隔离事务的 HAT。可串行化和线性化需要 &lt;em&gt;共识&lt;/em&gt; ，我们可以通过 Paxos，ZAB，VR 或 Raft 获得。现在，我们将讨论分布式系统的不同规模。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时延特征&#34;&gt;时延特征&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;时延不会为 0
&lt;ul&gt;
&lt;li&gt;带宽一直在增加，但是正在接近光和电子的物理极限&lt;/li&gt;
&lt;li&gt;延迟预算决定了您的系统设计
&lt;ul&gt;
&lt;li&gt;你可以负担多少次网络调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于慢，不同类型的系统有不同的定义
&lt;ul&gt;
&lt;li&gt;不同的目标&lt;/li&gt;
&lt;li&gt;不同的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多核系统&#34;&gt;多核系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多核（尤其是 NUMA）架构是类似的分布式系统
&lt;ul&gt;
&lt;li&gt;节点不会病态故障，但是消息传递很慢&lt;/li&gt;
&lt;li&gt;同步网络通过一个总线提供（例如，Intel QPI）&lt;/li&gt;
&lt;li&gt;硬件和微代码中的整个复杂的协议集使内存看起来很清晰&lt;/li&gt;
&lt;li&gt;非临时存储指令（例如，MOVNTI）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提供了屏蔽分布特性的抽象
&lt;ul&gt;
&lt;li&gt;MFENCE/SFENCE/LFENCE
&lt;ul&gt;
&lt;li&gt;引入针对加载/存储指令的序列化点&lt;/li&gt;
&lt;li&gt;延迟特征： ~100 周期 / ~30ns
&lt;ul&gt;
&lt;li&gt;依赖硬件，cache，指令等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMPXCHG 比较和交换（顺序一致修改内存）&lt;/li&gt;
&lt;li&gt;LOCK
&lt;ul&gt;
&lt;li&gt;跨核心锁定整个内存子系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是抽象的同时也伴随着开销
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Transactional_Synchronization_Extensions#Hardware_Lock_Elision&#34;&gt;HLE&lt;/a&gt; 可能会有所帮助，但尚未成熟&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mechanical-sympathy.blogspot.com/&#34;&gt;Blog: Mechanical Sympathy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在可能的地方，避免协调&lt;/li&gt;
&lt;li&gt;上下文转换（进程或者线程）代价很高&lt;/li&gt;
&lt;li&gt;处理器固定可以真正改善东西&lt;/li&gt;
&lt;li&gt;当编写多线程程序时，将你的工作切分成独立的块
&lt;ul&gt;
&lt;li&gt;尝试将内存屏障与工作单元边界对齐&lt;/li&gt;
&lt;li&gt;允许处理器在工作单元内尽可能多地作弊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See Danica Porobic, 2016: High Performance Transaction Processing on Non-Uniform Hardware Topologies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;本地网络&#34;&gt;本地网络&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你通常会在局域网内部部署复制系统&lt;/li&gt;
&lt;li&gt;消息延迟可以低至 100 us
&lt;ul&gt;
&lt;li&gt;但是，在任何规模较大的网络（EC2）中，最少在 ms 范围&lt;/li&gt;
&lt;li&gt;又是，包可能会被延迟五分钟&lt;/li&gt;
&lt;li&gt;对这种情况需要做规划&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;与未命中缓存的磁盘查找相比，网络在 mega 数量级
&lt;ul&gt;
&lt;li&gt;或者更快，在 EC2 中
&lt;ul&gt;
&lt;li&gt;EC2 磁盘延迟大约是 20ms
&lt;ul&gt;
&lt;li&gt;200 ms ?
&lt;ul&gt;
&lt;li&gt;20000 ms ?
&lt;ul&gt;
&lt;li&gt;但是 EBS 实际是其它计算机&lt;/li&gt;
&lt;li&gt;笑死，如果你认为 EC2 中一切都是真实的
&lt;ul&gt;
&lt;li&gt;等等，实际的磁盘也会这样做？
&lt;ul&gt;
&lt;li&gt;到底什么是 IO 调度程序？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是网络比内存/计算更慢
&lt;ul&gt;
&lt;li&gt;如果你的目标是吞吐量，工作单位应该花费超过一毫秒&lt;/li&gt;
&lt;li&gt;但是分布还有其它原因
&lt;ul&gt;
&lt;li&gt;资源分片&lt;/li&gt;
&lt;li&gt;故障隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;地理复制&#34;&gt;地理复制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;全球范围部署的两个原因
&lt;ul&gt;
&lt;li&gt;最终用户的延迟
&lt;ul&gt;
&lt;li&gt;人类可以探测到 ~10ms 的延迟，容忍 ~100ms 的延迟&lt;/li&gt;
&lt;li&gt;SF&amp;ndash;Denver: 50ms&lt;/li&gt;
&lt;li&gt;SF&amp;ndash;Tokyo: 100ms&lt;/li&gt;
&lt;li&gt;SF&amp;ndash;Madrid: 200ms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;灾难恢复
&lt;ul&gt;
&lt;li&gt;数据中心是很好的，但是不是完美的&lt;/li&gt;
&lt;li&gt;飓风是一个问题&lt;/li&gt;
&lt;li&gt;整个亚马逊的区域可能会故障
&lt;ul&gt;
&lt;li&gt;是的，是区域，不是可用区(AZ)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最少一轮的共识
&lt;ul&gt;
&lt;li&gt;差的情况下可能需要 4 轮
&lt;ul&gt;
&lt;li&gt;如果你有一个糟糕的 Paxos 实现（例如 Cassandra），也许总是 4 轮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以如果想在数据中心之间使用 Paxos，准备好应对这种开销&lt;/li&gt;
&lt;li&gt;因为最小的延迟比用户可容忍的延迟还要高
&lt;ul&gt;
&lt;li&gt;cache cache cache&lt;/li&gt;
&lt;li&gt;写入队列，异步传递&lt;/li&gt;
&lt;li&gt;考虑减少一致性保证以换取低延迟&lt;/li&gt;
&lt;li&gt;CRDT 可以保证安全的本地写入&lt;/li&gt;
&lt;li&gt;因果一致性和 HAT 可以成为好的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;强一致性呢？
&lt;ul&gt;
&lt;li&gt;地理分布的服务具有天然的分裂性
&lt;ul&gt;
&lt;li&gt;EU 用户在 EU 服务器上；US 用户在 US 的服务器上&lt;/li&gt;
&lt;li&gt;使用共识在不同的数据中心中间迁移用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;固定/代理 更新到所在地数据中心
&lt;ul&gt;
&lt;li&gt;很有希望是最近的数据中心&lt;/li&gt;
&lt;li&gt;但也可能不是。我认为 Facebook 仍然将所有写入推送到一个数据中心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当顺序一致性没问题时，将读取在本地缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;回顾-3&#34;&gt;回顾&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们讨论了分布式系统的三个特征尺度：与同步网络耦合的多核处理器，由 LAN 链接的计算机，以及通过互联网或专用光纤链接的数据中心。 CPU 的主要后果是性能问题：了解如何最小化协调。 在 LAN 上，在用户注意到之前，延迟对于许多网络跃点来说足够短。 在地理复制系统中，高延迟最终会推动一致的固定数据中心的解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见的分布式系统&#34;&gt;常见的分布式系统&lt;/h2&gt;
&lt;h3 id=&#34;外置堆&#34;&gt;外置堆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Redis，memcached，&amp;hellip;&lt;/li&gt;
&lt;li&gt;数据适合放到内存中，复杂的数据结构&lt;/li&gt;
&lt;li&gt;当你的数据结构的内置数据结构很慢/丑陋时很有用&lt;/li&gt;
&lt;li&gt;跟缓存一样优秀&lt;/li&gt;
&lt;li&gt;或者作为平台之间共享状态的快速便捷的暂存器&lt;/li&gt;
&lt;li&gt;不是特别安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kv-存储&#34;&gt;KV 存储&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Riak，Couch，Mongo，Cassandra，RethinkDB，HDFS，&amp;hellip;&lt;/li&gt;
&lt;li&gt;通常 1,2,3 维度的键&lt;/li&gt;
&lt;li&gt;O(1)访问时间，又是 O(range)根据 ID 的范围扫描&lt;/li&gt;
&lt;li&gt;值之间没有强依赖关系&lt;/li&gt;
&lt;li&gt;对象可以是不透明的或结构化的&lt;/li&gt;
&lt;li&gt;大数据集&lt;/li&gt;
&lt;li&gt;通常是可线性扩展的&lt;/li&gt;
&lt;li&gt;通常没有事务&lt;/li&gt;
&lt;li&gt;一致性模型范围 - 通常是可选的线性化/顺序操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sql-数据库&#34;&gt;SQL 数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Postgres, MySQL, Percona XtraDB, Oracle, MSSQL, VoltDB, CockroachDB, &amp;hellip;&lt;/li&gt;
&lt;li&gt;通过关系代数定义：restrictions of products of records 等&lt;/li&gt;
&lt;li&gt;中等大小的数据集&lt;/li&gt;
&lt;li&gt;通常包含多记录事务&lt;/li&gt;
&lt;li&gt;关系和事务需要协调，减少扩展性&lt;/li&gt;
&lt;li&gt;许多系统是主从切换&lt;/li&gt;
&lt;li&gt;访问代价依赖索引&lt;/li&gt;
&lt;li&gt;典型的强一致性（SI，可串行化，阉割的可串行化）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;搜索&#34;&gt;搜索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch, SolrCloud, &amp;hellip;&lt;/li&gt;
&lt;li&gt;索引引用的文件&lt;/li&gt;
&lt;li&gt;中等到很大的数据集&lt;/li&gt;
&lt;li&gt;使用 O(1)文档访问，日志化的搜索&lt;/li&gt;
&lt;li&gt;很好的扩展性&lt;/li&gt;
&lt;li&gt;典型的弱一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协调服务&#34;&gt;协调服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Zookeeper、ETCD、Consul，&amp;hellip;&lt;/li&gt;
&lt;li&gt;典型的强（顺序或者线性化）一致性&lt;/li&gt;
&lt;li&gt;小数据集&lt;/li&gt;
&lt;li&gt;作为无状态服务的协调原语很有用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流系统&#34;&gt;流系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Storm、Spark &amp;hellip;&lt;/li&gt;
&lt;li&gt;通常是定制设计、或者使用工具包来构建&lt;/li&gt;
&lt;li&gt;典型的小内存数据容量&lt;/li&gt;
&lt;li&gt;低延迟&lt;/li&gt;
&lt;li&gt;高吞吐&lt;/li&gt;
&lt;li&gt;弱一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式队列&#34;&gt;分布式队列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kafka, Kestrel, Rabbit, IronMQ, ActiveMQ, HornetQ, Beanstalk, SQS, Celery, &amp;hellip;&lt;/li&gt;
&lt;li&gt;在多个节点将日志写入磁盘来实现冗余&lt;/li&gt;
&lt;li&gt;当您需要立即确认工作，并在以后使用很有用&lt;/li&gt;
&lt;li&gt;在无状态服务之间可靠地发送数据&lt;/li&gt;
&lt;li&gt;我知道的仅有的一个不会在分区时丢失数据的是 Kafka
&lt;ul&gt;
&lt;li&gt;SQS 也能？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列不会提高端到端延迟
&lt;ul&gt;
&lt;li&gt;总是更快地立即完成工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列不会提高平均吞吐
&lt;ul&gt;
&lt;li&gt;消费者的限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当消费者并发时，队列不提供总事件排序
&lt;ul&gt;
&lt;li&gt;您的消费者几乎肯定是并发的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同样，队列不保证异步使用者的事件顺序
&lt;ul&gt;
&lt;li&gt;因为消费者的副作用可能无序发生&lt;/li&gt;
&lt;li&gt;所以，不要依赖顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列不能提供最多一次或者最少一次的递送
&lt;ul&gt;
&lt;li&gt;任何声称不这样做的人都试图向你推销一些东西&lt;/li&gt;
&lt;li&gt;恢复一次性递送需要仔细控制副作用&lt;/li&gt;
&lt;li&gt;使您的排队操作具有幂等性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;队列确实提高了突发吞吐量&lt;/li&gt;
&lt;li&gt;分布式队列还提高了容错（如果不丢失数据）
&lt;ul&gt;
&lt;li&gt;如果不需要容错或者大缓冲，使用 TCP&lt;/li&gt;
&lt;li&gt;很多人使用具有六个磁盘写入和十五个网络跃点的队列，其中单个套接字 write()可能已经足够&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当您选择了糟糕的运行时时，队列可以让您解脱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;回顾-4&#34;&gt;回顾&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们使用数据结构存储作为外置堆：它们是分布式系统的管道磁带。 KV 存储和关系数据库通常被部署为记录系统; KV 存储使用独立 key，不太适合关系数据，但与 SQL 存储相比提供了更好的可伸缩性和部分容错性，SQL 存储提供了丰富的查询和强大的事务保证。分布式搜索和协调服务完善了我们构建应用程序的基本工具包。 流系统应用于数据集的连续，低延迟处理，并且往往看起来更像框架而不是数据库。 分布式队列专注于 &lt;em&gt;消息&lt;/em&gt; 而不是 &lt;em&gt;转换&lt;/em&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模式语言&#34;&gt;模式语言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;构建分布式系统的一般建议
&lt;ul&gt;
&lt;li&gt;来之不易的经历&lt;/li&gt;
&lt;li&gt;重复其他专家告诉我的内容
&lt;ul&gt;
&lt;li&gt;在酒桌上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;道听途说&lt;/li&gt;
&lt;li&gt;过度简化&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cargo_cult_programming&#34;&gt;Cargo-culting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我刚做的东西&lt;/li&gt;
&lt;li&gt;你可能已经从别的渠道听说了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不要用分布式&#34;&gt;不要用分布式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;规则 1：如果不是必须，请不要使用分布式
&lt;ul&gt;
&lt;li&gt;本地系统有可靠的原语。锁、线程、队列、事务。
&lt;ul&gt;
&lt;li&gt;当你迁移到分布式系统时，你必须从头开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这个问题是否很小可以在一个节点上完成？
&lt;ul&gt;
&lt;li&gt;我有一个很大的数据问题
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.softlayer.com/&#34;&gt;Softlayer&lt;/a&gt; 将以每箱 5000 美元每月的价格出租一箱 3TB 的内存&lt;/li&gt;
&lt;li&gt;Supermicro 将以约 115,000 美元的价格出售 6TB 的盒子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现代计算机很快
&lt;ul&gt;
&lt;li&gt;我所知道的生产 JVM HTTP 服务已经可以支持 50K 请求/秒
&lt;ul&gt;
&lt;li&gt;解析 JSON 时间，记日志到磁盘，推送到 S3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 TCP 的协议缓冲区：1000 万/秒 的事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这项服务能否容忍单个节点的保证？&lt;/li&gt;
&lt;li&gt;如果它奔溃了，我们可以再起来吗？&lt;/li&gt;
&lt;li&gt;手动干预可以取代分布式算法吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用已经存在的分布式系统&#34;&gt;使用已经存在的分布式系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果必须分布，可以将任务推送到其它软件？
&lt;ul&gt;
&lt;li&gt;分布式数据库或者日志怎么样？&lt;/li&gt;
&lt;li&gt;可以给亚马逊付钱让他们来做吗？&lt;/li&gt;
&lt;li&gt;相反，维护费用是多少？&lt;/li&gt;
&lt;li&gt;学习使用/操作该分布式系统多少钱？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;永不故障&#34;&gt;永不故障&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;购买非常昂贵的硬件&lt;/li&gt;
&lt;li&gt;以受控方式更改软件和硬件
&lt;ul&gt;
&lt;li&gt;针对临时环境的试运行部署&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以构建非常可靠的网络和机器
&lt;ul&gt;
&lt;li&gt;以降低成本为代价，购买更昂贵的硬件，寻找人才&lt;/li&gt;
&lt;li&gt;硬件/网络故障仍然 &lt;em&gt;发生&lt;/em&gt; ，但足够罕见 =&amp;gt; 低优先级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接受故障&#34;&gt;接受故障&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分布式系统不仅以 &lt;em&gt;延迟&lt;/em&gt; 为特征，但以 &lt;em&gt;经常性，部分故障为特征&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;我们能接受这种失败并继续我们的生活吗？
&lt;ul&gt;
&lt;li&gt;我们的 SLA 是什么？&lt;/li&gt;
&lt;li&gt;可以手动恢复吗？&lt;/li&gt;
&lt;li&gt;可以给人付钱来修复吗？&lt;/li&gt;
&lt;li&gt;保险可以承担损害吗？&lt;/li&gt;
&lt;li&gt;我们可以打电话给客户并道歉吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;听起来很傻，但是更加便宜
&lt;ul&gt;
&lt;li&gt;我们永远也不能阻止 100%的系统故障&lt;/li&gt;
&lt;li&gt;有意识地选择恢复高于系统的水平&lt;/li&gt;
&lt;li&gt;这就是金融公司和零售商的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优先恢复&#34;&gt;优先恢复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Assume a failure has just occurred: how will you recover?&lt;/li&gt;
&lt;li&gt;假设一个故障刚刚发生了：你怎么恢复？&lt;/li&gt;
&lt;li&gt;Make this recovery the &lt;em&gt;default&lt;/em&gt; path of execution&lt;/li&gt;
&lt;li&gt;使这个恢复成为程序的必经之路&lt;/li&gt;
&lt;li&gt;编写恢复优先的代码可以让你避免错误处理&lt;/li&gt;
&lt;li&gt;默认情况下执行恢复代码意味着您知道它有效&lt;/li&gt;
&lt;li&gt;默认情况下恢复意味着您不必担心在真正故障期间的不同语义&lt;/li&gt;
&lt;li&gt;如有必要，引入性能优化的快乐路径
&lt;ul&gt;
&lt;li&gt;但是你失去了其中的一些优势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核对环路&#34;&gt;核对环路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你有一个复杂的、有状态的系统，并想把它迁移到某个地方&lt;/li&gt;
&lt;li&gt;可以制定变更计划，并按顺序应用这些变更
&lt;ul&gt;
&lt;li&gt;但是，如果某些更改中断怎么办？ 你怎么恢复？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相反，维护一个目标：表示您希望系统成为什么&lt;/li&gt;
&lt;li&gt;接下来，编写一个查看当前状态的函数，并将其与目标进行比较&lt;/li&gt;
&lt;li&gt;使用该差异找到使系统更接近目标的步骤&lt;/li&gt;
&lt;li&gt;无限重复&lt;/li&gt;
&lt;li&gt;抗故障和抗干扰能力强
&lt;ul&gt;
&lt;li&gt;如果您的管理员手动调整内容怎么办？&lt;/li&gt;
&lt;li&gt;如果控制系统的两个实例同时运行怎么办？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2898444&#34;&gt;Borg &amp;amp; Kubernetes&lt;/a&gt; 等系统中部署效果显着&lt;/li&gt;
&lt;li&gt;也适用于保持系统之间的数据同步
&lt;ul&gt;
&lt;li&gt;例如，确保每个订单都已发货和计费&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;备份&#34;&gt;备份&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;备份基本是顺序一致的，但是可能丢失一个操作窗口的数据
&lt;ul&gt;
&lt;li&gt;当正确完成时
&lt;ul&gt;
&lt;li&gt;一些备份程序没有快照状态，导致文件系统或者数据库损坏&lt;/li&gt;
&lt;li&gt;破坏外键关系，丢失文件等&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;允许恢复到几分钟或者几天前&lt;/li&gt;
&lt;li&gt;但是除了故障恢复，可以让你按时间返回
&lt;ul&gt;
&lt;li&gt;从逻辑故障中恢复很有用
&lt;ul&gt;
&lt;li&gt;分布式数据库正确完成其任务，但是告诉数据库删除了关键数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;冗余&#34;&gt;冗余&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;好的，所以失败不是一个选择&lt;/li&gt;
&lt;li&gt;希望降低故障的可能性&lt;/li&gt;
&lt;li&gt;在几个节点上进行相同的状态和相同的计算
&lt;ul&gt;
&lt;li&gt;我不是 主-备 的忠实信徒
&lt;ul&gt;
&lt;li&gt;备机可能有冷缓存，损坏的磁盘，旧版本等&lt;/li&gt;
&lt;li&gt;备机在变为主机时往往会失败&lt;/li&gt;
&lt;li&gt;尽可能主-主
&lt;ul&gt;
&lt;li&gt;效率的可预测性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我也不是只有两个副本的忠实的粉丝
&lt;ul&gt;
&lt;li&gt;节点故障概率太高&lt;/li&gt;
&lt;li&gt;对于不重要的数据还可以&lt;/li&gt;
&lt;li&gt;我一般都想要 3 份数据副本
&lt;ul&gt;
&lt;li&gt;对于重要的数据，4 或者 5 分副本&lt;/li&gt;
&lt;li&gt;对于 Paxo 或者其它的多数派系统，3,5,7 很常见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常见的策略：Paxos 跨越 5 个节点，3 个或者 4 个在本地数据中心
&lt;ul&gt;
&lt;li&gt;操作可以在本地节点确认后立即完成;低延迟&lt;/li&gt;
&lt;li&gt;适应单节点故障（虽然延迟会出现峰值）&lt;/li&gt;
&lt;li&gt;但是在另一个 DC 中仍然有一个顺序一致的备份
&lt;ul&gt;
&lt;li&gt;所以在最后你失去了整个 DC，一切也都不会丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参见 Camille Fournier 关于 ZK 部署的会谈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要故障不相关，冗余就可以提高可用性
&lt;ul&gt;
&lt;li&gt;失败并非不相关&lt;/li&gt;
&lt;li&gt;来自同一批次的磁盘同时失败&lt;/li&gt;
&lt;li&gt;当架顶式交换机断开时，同一机架节点出现故障&lt;/li&gt;
&lt;li&gt;UPS 断电时，相同 DC 节点发生故障&lt;/li&gt;
&lt;li&gt;查看整个 EC2 AZ 故障&lt;/li&gt;
&lt;li&gt;在每个节点上运行相同的错误计算将中断每个节点
&lt;ul&gt;
&lt;li&gt;昂贵的查询&lt;/li&gt;
&lt;li&gt;Riak list-keys&lt;/li&gt;
&lt;li&gt;Cassandra doomstones&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;级联故障
&lt;ul&gt;
&lt;li&gt;Thundering-herd&lt;/li&gt;
&lt;li&gt;TCP incast&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分片&#34;&gt;分片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这个问题很大，你忍一下&lt;/li&gt;
&lt;li&gt;将问题分解成足够小的部分以适合节点
&lt;ul&gt;
&lt;li&gt;不小：小零件=&amp;gt;高开销&lt;/li&gt;
&lt;li&gt;不太大：需要逐个从节点到节点重新平衡工作单元&lt;/li&gt;
&lt;li&gt;大约 10-100 个工作单位/节点是理想的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理想的：工作单元相同的大小
&lt;ul&gt;
&lt;li&gt;小心热点&lt;/li&gt;
&lt;li&gt;小心随时间变化的工作量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提前了解你的界限
&lt;ul&gt;
&lt;li&gt;压倒一个节点之前单个部分有多大？&lt;/li&gt;
&lt;li&gt;我们如何在它节点上出现之前，如何强制执行该限制？
&lt;ul&gt;
&lt;li&gt;然后在系统重新平衡时一个接一个地下沉所有其他节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分配分片给节点
&lt;ul&gt;
&lt;li&gt;在数据库中内置&lt;/li&gt;
&lt;li&gt;很好的候选，ZK，Etcd 等等&lt;/li&gt;
&lt;li&gt;参见 Boundary&amp;rsquo;s Ordasity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;独立的域&#34;&gt;独立的域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分片是一般模式避免协调的一个特殊场景
&lt;ul&gt;
&lt;li&gt;保持尽可能独立
&lt;ul&gt;
&lt;li&gt;提高容错&lt;/li&gt;
&lt;li&gt;提高性能&lt;/li&gt;
&lt;li&gt;减少复杂性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分片提高伸缩性&lt;/li&gt;
&lt;li&gt;通过 CRDT 避免协调&lt;/li&gt;
&lt;li&gt;Flake ID：mostly time-ordered identifiers, zero-coordination
&lt;ul&gt;
&lt;li&gt;参考： &lt;a href=&#34;http://yellerapp.com/posts/2015-02-09-flake-ids.html&#34;&gt;http://yellerapp.com/posts/2015-02-09-flake-ids.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部分可用：用户可以继续使用系统的一些部分&lt;/li&gt;
&lt;li&gt;处理队列：更多消费者减少昂贵事件的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;id-结构&#34;&gt;ID 结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在我们的世界中，一定需要唯一的标识
&lt;ul&gt;
&lt;li&gt;在规模上，ID 结构可以决定你的成败&lt;/li&gt;
&lt;li&gt;考虑下面的开销
&lt;ul&gt;
&lt;li&gt;扫描&lt;/li&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;li&gt;分片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;顺序 ID 需要协调：我们可以避免吗？
&lt;ul&gt;
&lt;li&gt;Flake ID，UUID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于可分片，你的 ID 可以直接映射到一个分片吗？&lt;/li&gt;
&lt;li&gt;SaaS 应用：对象 ID 也可以编码客户 ID&lt;/li&gt;
&lt;li&gt;Twitter：推特 ID 可以编码用户 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不变的值&#34;&gt;不变的值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从不更改的数据存储起来很简单
&lt;ul&gt;
&lt;li&gt;不需要协调&lt;/li&gt;
&lt;li&gt;复制和恢复开销很小&lt;/li&gt;
&lt;li&gt;在磁盘上很小的重新打包代价&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于 Cassandra，Riak，和 LSM 树 DB 很有用
&lt;ul&gt;
&lt;li&gt;或者 kafka 的日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原因很简单：要么是存在，要么不存在
&lt;ul&gt;
&lt;li&gt;消除各种事务的头痛问题&lt;/li&gt;
&lt;li&gt;非常容易缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高可用和持久性，可调节的写入延迟
&lt;ul&gt;
&lt;li&gt;低写入延迟：可以从最近的副本做应答&lt;/li&gt;
&lt;li&gt;对于地理分布尤其有价值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要垃圾回收
&lt;ul&gt;
&lt;li&gt;但有很好的方法可以做到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可变值&#34;&gt;可变值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指向变值的指针&lt;/li&gt;
&lt;li&gt;指针很小！仅元数据
&lt;ul&gt;
&lt;li&gt;可以在小 DB 中存储很多的指针&lt;/li&gt;
&lt;li&gt;对于协调服务或者关系 DB，是很好的候选&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;典型地，在系统中没有很多指针
&lt;ul&gt;
&lt;li&gt;你的全部 DB 可以在用一个指针表示&lt;/li&gt;
&lt;li&gt;Datomic 只有 ~5 个标识&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对标识的强一致性操作可以由不可变的 HA 存储支持
&lt;ul&gt;
&lt;li&gt;利用 AP 存储延迟和规模&lt;/li&gt;
&lt;li&gt;利用共识系统提供的小数据集的强一致性&lt;/li&gt;
&lt;li&gt;写的可用性受到标识存储的限制
&lt;ul&gt;
&lt;li&gt;但是，如果你只需要顺序一致性，就可以读缓存&lt;/li&gt;
&lt;li&gt;如果您只需要序列化就可以更容易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参见 Rich Hickey 关于 Datomic 架构的演讲&lt;/li&gt;
&lt;li&gt;参见 Pat Helland 在 2013 年关于 Salesforce 存储的 Ricon West 主题演讲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;汇合&#34;&gt;汇合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;与顺序无关的系统更容易构造和推理&lt;/li&gt;
&lt;li&gt;因此，可以避免协调&lt;/li&gt;
&lt;li&gt;CRDT 是汇合的，这意味着我们可以应用更新而不必等待&lt;/li&gt;
&lt;li&gt;不变的值通常是汇合的：一旦存在，就固定了&lt;/li&gt;
&lt;li&gt;流媒体系统也可以利用汇合：
&lt;ul&gt;
&lt;li&gt;当你知道你已经看到了所有内容时，缓冲事件和计算+刷新&lt;/li&gt;
&lt;li&gt;发出部分结果，以便您现在可以采取操作，例如用于监视&lt;/li&gt;
&lt;li&gt;当完整数据可用时，通过加法或者最大值来合并&lt;/li&gt;
&lt;li&gt;银行分类账（大部分）是汇合的：事务顺序不影响余额
&lt;ul&gt;
&lt;li&gt;但当你需要执行一个最小余额时，就不再是汇合了&lt;/li&gt;
&lt;li&gt;结合密封事件（例如当天结束）以恢复汇合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考 Aiken, Widom, &amp;amp; Hellerstein 1992, &amp;ldquo;Behavior of Database Production Rules&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;背压&#34;&gt;背压&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;交互的服务通常通过队列连接&lt;/li&gt;
&lt;li&gt;服务和队列的容量是有限的&lt;/li&gt;
&lt;li&gt;当下游服务无法处理负载时，您如何处理它？
&lt;ol&gt;
&lt;li&gt;消耗资源并爆炸&lt;/li&gt;
&lt;li&gt;摆脱负载，开始删除请求&lt;/li&gt;
&lt;li&gt;拒绝请求，忽略任务，应答客户端失败&lt;/li&gt;
&lt;li&gt;给客户端背压，告诉客户端放慢速度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;2-4 允许系统追赶并恢复&lt;/li&gt;
&lt;li&gt;背压取决于生产者的选择：组成成分
&lt;ul&gt;
&lt;li&gt;减载系统的客户端被锁定在减载中
&lt;ul&gt;
&lt;li&gt;他们没有办法知道系统已被冲洗过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;背压系统的客户端可以将背压应用到他们的客户端
&lt;ul&gt;
&lt;li&gt;或卸载，依赖他们选择&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你在实现一个异步系统，一定要包括反压力
&lt;ul&gt;
&lt;li&gt;你的用户会感谢你&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本上：边界资源
&lt;ul&gt;
&lt;li&gt;请求超时（有界时间）&lt;/li&gt;
&lt;li&gt;指数退避（有界使用）&lt;/li&gt;
&lt;li&gt;有界队列&lt;/li&gt;
&lt;li&gt;有界并发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考：Zach Tellman, &amp;ldquo;Everything Will Flow&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;域模型服务&#34;&gt;域模型服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;问题由相互作用的逻辑部分组成&lt;/li&gt;
&lt;li&gt;每个逻辑部分具有不同的代码，性能和存储需求&lt;/li&gt;
&lt;li&gt;单体应用程序基本上是 &lt;em&gt;多租户&lt;/em&gt; 系统
&lt;ul&gt;
&lt;li&gt;多租户很难&lt;/li&gt;
&lt;li&gt;但通常可以在同一个过程中运行多个逻辑“服务”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将您的系统划分为域的离散部分的逻辑服务模型&lt;/li&gt;
&lt;li&gt;OO 方法：每个 &lt;em&gt;名词&lt;/em&gt; 是一种服务
&lt;ul&gt;
&lt;li&gt;用户服务&lt;/li&gt;
&lt;li&gt;视频服务&lt;/li&gt;
&lt;li&gt;索引服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能方法：每个 &lt;em&gt;动词&lt;/em&gt; 是一项服务
&lt;ul&gt;
&lt;li&gt;验证服务&lt;/li&gt;
&lt;li&gt;搜索服务&lt;/li&gt;
&lt;li&gt;调度/路由服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我所知道的大多数大型系统都使用混合方式
&lt;ul&gt;
&lt;li&gt;名词服务是强制执行 &lt;em&gt;数据类型不变量的好方法&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;动词服务是强制执行 &lt;em&gt;转换不变量的好方法&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;所以有一个基本的用户服务， &lt;em&gt;由 Auth 服务使用&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你画线的地方&amp;hellip;&amp;hellip;那很棘手
&lt;ul&gt;
&lt;li&gt;服务带来开销：尽可能少&lt;/li&gt;
&lt;li&gt;考虑工作单元&lt;/li&gt;
&lt;li&gt;需要独立扩展的独立服务&lt;/li&gt;
&lt;li&gt;具有严格依赖性和严格延迟预算的服务&lt;/li&gt;
&lt;li&gt;使用补充资源（例如磁盘和 CPU）的协同服务&lt;/li&gt;
&lt;li&gt;手动：在渲染节点上运行 memcache&lt;/li&gt;
&lt;li&gt;较新的商店：Google Borg，Mesos，Kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务应该封装和抽象
&lt;ul&gt;
&lt;li&gt;尝试建造树而不是网&lt;/li&gt;
&lt;li&gt;避免让外人直接操纵服务的数据存储&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务之间的协调需要特殊协议
&lt;ul&gt;
&lt;li&gt;必须重新发明事务&lt;/li&gt;
&lt;li&gt;尽可能去通信&lt;/li&gt;
&lt;li&gt;萨加斯&lt;/li&gt;
&lt;li&gt;是为单节点世界编写的：我们必须在分布式环境中聪明一点&lt;/li&gt;
&lt;li&gt;事务必须是幂等的，或者一起回滚&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.ucsb.edu/~vaibhavarora/Typhon-Ieee-Cloud-2017.pdf&#34;&gt;Typhon / Cerberus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;多个数据存储的因果一致性协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构遵循社交空间&#34;&gt;结构遵循社交空间&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;制作软件是一种基本的社交工具&lt;/li&gt;
&lt;li&gt;自然对齐：团队或个人拥有特定服务
&lt;ul&gt;
&lt;li&gt;乔·弗里曼，“无结构的暴政”
&lt;ul&gt;
&lt;li&gt;责任和权力应该是明确的&lt;/li&gt;
&lt;li&gt;通过角色轮换人员以防止领地
&lt;ul&gt;
&lt;li&gt;促进信息共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但不要经常转换
&lt;ul&gt;
&lt;li&gt;软件的增加成本非常高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随着团队的成长，其使命和思想将正式化
&lt;ul&gt;
&lt;li&gt;服务和他们的界限也是如此&lt;/li&gt;
&lt;li&gt;逐渐积累关于与世界的服务关系的假设&lt;/li&gt;
&lt;li&gt;重写以应对不断变化的外部压力&lt;/li&gt;
&lt;li&gt;Tushman＆Romanelli，1985：组织演变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务可以是库
&lt;ul&gt;
&lt;li&gt;最初，您的所有服务应该是库&lt;/li&gt;
&lt;li&gt;完全可以依赖多个服务中的用户库&lt;/li&gt;
&lt;li&gt;具有明确界限的库很容易被提取出来成为服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;社会结构管理库/服务边界
&lt;ul&gt;
&lt;li&gt;由于库的用户很少，或者用户协调紧密，因此更改很容易&lt;/li&gt;
&lt;li&gt;但是在许多团队中，用户有不同的优先级，必须让他们信服&lt;/li&gt;
&lt;li&gt;为什么用户应该做一些工作来升级到新的库版本？&lt;/li&gt;
&lt;li&gt;服务 &lt;em&gt;强制&lt;/em&gt; 通过定义的 API 弃用生命周期进行协调
&lt;ul&gt;
&lt;li&gt;您还可以通过代码审查和工具对库强制执行此操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务支持集中控制
&lt;ul&gt;
&lt;li&gt;您的性能改进会立即影响每个人&lt;/li&gt;
&lt;li&gt;逐步转换为新的磁盘格式或支持数据库&lt;/li&gt;
&lt;li&gt;在一个地方使用该服务&lt;/li&gt;
&lt;li&gt;更难用库做这些事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务有成本
&lt;ul&gt;
&lt;li&gt;网络调用的故障复杂性和延迟开销&lt;/li&gt;
&lt;li&gt;服务依赖的混乱&lt;/li&gt;
&lt;li&gt;很难静态分析代码路径&lt;/li&gt;
&lt;li&gt;您认为库 API 版本很难&lt;/li&gt;
&lt;li&gt;额外的仪器/部署&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务可以使用良好的客户端库
&lt;ul&gt;
&lt;li&gt;该库可能是“打开套接字”或 HTTP 客户端
&lt;ul&gt;
&lt;li&gt;利用 HTTP 标头！
&lt;ul&gt;
&lt;li&gt;接受标题版本&lt;/li&gt;
&lt;li&gt;对缓存和代理的大量支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Haproxy 是 HTTP 和 TCP 服务的优秀路由器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终，库可能包含模拟 IO
&lt;ul&gt;
&lt;li&gt;服务团队负责测试服务是否提供 API&lt;/li&gt;
&lt;li&gt;当已知 API 稳定时，每个客户都可以 &lt;em&gt;假设&lt;/em&gt; 它有效&lt;/li&gt;
&lt;li&gt;无需在测试套件中进行网络呼叫&lt;/li&gt;
&lt;li&gt;大幅减少测试运行时和开发环境的复杂性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;跨服务协调&#34;&gt;跨服务协调&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务之间的协调需要特殊的协议
&lt;ul&gt;
&lt;li&gt;必须重新发明事务&lt;/li&gt;
&lt;li&gt;尽可能交换信息&lt;/li&gt;
&lt;li&gt;Sagas
&lt;ul&gt;
&lt;li&gt;是为单节点世界编写的：我们必须在分布式环境中保持聪明&lt;/li&gt;
&lt;li&gt;事务须是幂等的，或者可以回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.ucsb.edu/~vaibhavarora/Typhon-Ieee-Cloud-2017.pdf&#34;&gt;Typhon/Cerberus&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;基于多个数据存储的因果一致性协议
&lt;ul&gt;
&lt;li&gt;例如：如果露皮塔屏蔽了安吉拉小姐，然后发帖，安吉拉小姐就看不到了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Typhon：单个逻辑实体在不同的数据存储中有数据项表示
&lt;ul&gt;
&lt;li&gt;假设数据存储是可序列化的或对项目提供原子读取/cas&lt;/li&gt;
&lt;li&gt;访问同一实体且 T1 发生的事务- 在 T2 获得之前
因果依赖边 T1 -&amp;gt; T2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cerberus：涉及单个实体的事务协议 x
&lt;ul&gt;
&lt;li&gt;写入只能影响 x 的一种表示&lt;/li&gt;
&lt;li&gt;跨 x 表示的任意数量的读取&lt;/li&gt;
&lt;li&gt;全局元数据：每个实体的版本向量 (GVV)&lt;/li&gt;
&lt;li&gt;每个表示元数据：
&lt;ul&gt;
&lt;li&gt;更新版本向量 (UVV)：上次更新时已知的版本&lt;/li&gt;
&lt;li&gt;读取版本向量 (RVV)：上次读取时已知的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当 GVV &amp;lt; UVV/RVV 时检测到冲突&lt;/li&gt;
&lt;li&gt;两个阶段：
&lt;ul&gt;
&lt;li&gt;读
&lt;ul&gt;
&lt;li&gt;检查实体 x 的 GVV&lt;/li&gt;
&lt;li&gt;在每个（要求的）表示上执行 x 的读取&lt;/li&gt;
&lt;li&gt;在每个表示中：检查 RVV &amp;lt;= GVV，更新 RVV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写
&lt;ul&gt;
&lt;li&gt;发送写到代表&lt;/li&gt;
&lt;li&gt;检查 UVV &amp;lt;= GVV 和 RVV &amp;lt;= GVV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提交
&lt;ul&gt;
&lt;li&gt;更新表示和 RVV/UVV 确保 RVV/UVV 不变&lt;/li&gt;
&lt;li&gt;通过增加现有 UVV 的第 i 个条目构建的新 UVV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通用事务
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf&#34;&gt;加尔文&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;可序列化（或严格 1SR）事务&lt;/li&gt;
&lt;li&gt;确定性 txns 进入分片全局日志&lt;/li&gt;
&lt;li&gt;日志确保事务顺序&lt;/li&gt;
&lt;li&gt;在副本/分片上的应用不需要进一步的协调&lt;/li&gt;
&lt;li&gt;日志窗口的最小延迟下限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cockroachlabs.com/guides/cockroachdb-the-resilient-geo-distributed-sql-database-sigmod-2020/&#34;&gt;CockroachDB&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;可序列化&lt;/li&gt;
&lt;li&gt;假设线性化商店&lt;/li&gt;
&lt;li&gt;假设半同步时钟&lt;/li&gt;
&lt;li&gt;类似于更易于处理的扳手&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;迁移&#34;&gt;迁移&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;迁移很困难
&lt;ul&gt;
&lt;li&gt;没有银弹&lt;/li&gt;
&lt;li&gt;但有些技巧可以让你的生活更轻松&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬切换
&lt;ul&gt;
&lt;li&gt;编写新系统并迁移以将旧数据复制到其中&lt;/li&gt;
&lt;li&gt;让依赖服务与两者对话——但在实践中，只有一个。&lt;/li&gt;
&lt;li&gt;关闭旧系统&lt;/li&gt;
&lt;li&gt;复制数据&lt;/li&gt;
&lt;li&gt;启动新系统&lt;/li&gt;
&lt;li&gt;权衡！
&lt;ul&gt;
&lt;li&gt;不必担心传输中的数据&lt;/li&gt;
&lt;li&gt;简单的迁移脚本：只需读取所有数据并写入新的数据存储&lt;/li&gt;
&lt;li&gt;需要与迁移脚本成比例的停机时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有时可以一次将其范围限定为单个分片/用户/域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增量
&lt;ul&gt;
&lt;li&gt;编写新系统 B&lt;/li&gt;
&lt;li&gt;与原始 A 一起部署&lt;/li&gt;
&lt;li&gt;依赖服务与两者交谈
&lt;ul&gt;
&lt;li&gt;理想：找到所有读者，让每个读者都与 A 和 B 交谈&lt;/li&gt;
&lt;li&gt;然后开始写信给 B
&lt;ul&gt;
&lt;li&gt;这让您不必担心只知道 A 的读者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一致性噩梦；需要追踪所有数据依赖&lt;/li&gt;
&lt;li&gt;权衡！
&lt;ul&gt;
&lt;li&gt;减少/无停机时间&lt;/li&gt;
&lt;li&gt;但需要复杂的数据依赖推理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;包装服务
&lt;ul&gt;
&lt;li&gt;从操作上讲，查找和更改 A 的所有用户可能很棘手&lt;/li&gt;
&lt;li&gt;所以……不要。引入代理 A 的包装服务 W&lt;/li&gt;
&lt;li&gt;引入 B，并进行更改，以便 W 也与 B 交谈&lt;/li&gt;
&lt;li&gt;当 A 被淘汰时，移除 W 并直接与 B 交谈。&lt;/li&gt;
&lt;li&gt;允许集中度量、错误、行为比较等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最终的原子性
&lt;ul&gt;
&lt;li&gt;假设您将每次更新写入旧服务 A，然后写入新服务 B&lt;/li&gt;
&lt;li&gt;在某些时候，您对 A 的写入会成功，而 B 会失败。然后怎样呢？&lt;/li&gt;
&lt;li&gt;可以使用读修复：读取 A 和 B，填写缺失的更新
&lt;ul&gt;
&lt;li&gt;但这需要可合并性：仅适用于 CRDT 之类的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用核对流程
&lt;ul&gt;
&lt;li&gt;遍历整个数据库，寻找变化，同时适用于两者。&lt;/li&gt;
&lt;li&gt;还需要像 CRDT 这样的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 Sage
&lt;ul&gt;
&lt;li&gt;所有更新都进入持久队列&lt;/li&gt;
&lt;li&gt;队列工作者重试直到更新应用于 A 和 B&lt;/li&gt;
&lt;li&gt;可能需要订购更新以避免状态分歧
&lt;ul&gt;
&lt;li&gt;潜在的 &lt;em&gt;全局&lt;/em&gt; 列化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意数据库的一致性模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离
&lt;ul&gt;
&lt;li&gt;想象一下 Jane 将 w1 写入 A，然后写入 B&lt;/li&gt;
&lt;li&gt;同时，Naomi 将 w2 写入 B，然后写入 A&lt;/li&gt;
&lt;li&gt;结果：A = w2，B = w1&lt;/li&gt;
&lt;li&gt;最终的原子性不足以防止分歧&lt;/li&gt;
&lt;li&gt;可以通过选择标准订单来减少问题：总是 A 然后 B（或 B 然后 A）
&lt;ul&gt;
&lt;li&gt;但是想象一下
&lt;ul&gt;
&lt;li&gt;Jane 写 A = w1&lt;/li&gt;
&lt;li&gt;Naomi 写 A = w2&lt;/li&gt;
&lt;li&gt;Naomi 写 B = w2&lt;/li&gt;
&lt;li&gt;简写 B = w1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们又得到了喜忧参半的结果。射击。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 CRDT 缓解&lt;/li&gt;
&lt;li&gt;或者，如果 A 和 B 顺序一致，可以使用 CaS 操作来
确保就订单达成一致
&lt;ul&gt;
&lt;li&gt;“如果最后一次写入是 w1，则写入 w2”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果操作影响多个键，则必须在该处应用 CaS 逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增量迁移的有用属性
&lt;ul&gt;
&lt;li&gt;决定论
&lt;ul&gt;
&lt;li&gt;避免让数据库生成随机数、自动 ID、时间戳&lt;/li&gt;
&lt;li&gt;更容易将更新应用到两个数据存储并获得相同的结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;幂等性
&lt;ul&gt;
&lt;li&gt;让您自由重试更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换性
&lt;ul&gt;
&lt;li&gt;无需序列化更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CRDTs：结合性、交换性、幂等性。&lt;/li&gt;
&lt;li&gt;不变性：平凡的 CRDT&lt;/li&gt;
&lt;li&gt;无状态：无需担心状态！
&lt;ul&gt;
&lt;li&gt;确保你以同样的方式与外部有状态的东西交谈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;换出队列怎么样？
&lt;ul&gt;
&lt;li&gt;正如我们所提到的，队列系统应该已经被设计为幂等性，
和理想的交换性
&lt;ul&gt;
&lt;li&gt;如果是这样，这（相对）容易&lt;/li&gt;
&lt;li&gt;工作人员从两个队列中消费&lt;/li&gt;
&lt;li&gt;翻转生产者只向新队列发送消息&lt;/li&gt;
&lt;li&gt;等待旧队列耗尽&lt;/li&gt;
&lt;li&gt;解除旧队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但我们想要订单？？？
&lt;ul&gt;
&lt;li&gt;你将需要重建它&lt;/li&gt;
&lt;li&gt;一种选择：单个生产者与队列紧密耦合
&lt;ul&gt;
&lt;li&gt;将每条消息 m 写入 A 和 B；直到双方都确认才继续前进&lt;/li&gt;
&lt;li&gt;这强制 A 和 B 就订单达成一致&lt;/li&gt;
&lt;li&gt;消费者可以一视同仁地对待 A 和 B：只从 A 或 B 中消费
&lt;ul&gt;
&lt;li&gt;再次假设幂等性！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另一种选择：序列号，在客户端重建的顺序
&lt;ul&gt;
&lt;li&gt;例如为每个值分配序列号
&lt;ul&gt;
&lt;li&gt;使用 A 的队列偏移量？&lt;/li&gt;
&lt;li&gt;使用共识系统？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端读取序列号，存储在内部缓冲区中，按顺序应用 r&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;回顾-5&#34;&gt;回顾&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果可能，请尝试使用单个节点而不是分布式系统。 接受一些失败是不可避免的：SLA 和道歉可能具有成本效益。 为了处理灾难性故障，我们使用备份。为了提高可靠性，我们引入了冗余。 为了扩展到大的问题域，我们将问题分成片。不可变值易于存储和缓存，并且可以通过可变身份引用，允许我们在大规模上构建强大一致的系统。 随着软件的发展，不同的组件必须独立扩展，我们将库分解为不同的服务。 服务结构与团队密切配合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生产问题&#34;&gt;生产问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不仅仅是设计考虑&lt;/li&gt;
&lt;li&gt;证明很重要，但真正的系统需要 IO&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;您的文化支持分布式系统&#34;&gt;您的文化支持分布式系统&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;理解生产中的分布式系统需要具有多种角色的人员密切合作。
&lt;ul&gt;
&lt;li&gt;部署&lt;/li&gt;
&lt;li&gt;QA&lt;/li&gt;
&lt;li&gt;操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共性问题
&lt;ul&gt;
&lt;li&gt;开发需要关注产品&lt;/li&gt;
&lt;li&gt;运行需要关注实现&lt;/li&gt;
&lt;li&gt;好的沟通可以更快地诊断问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试一切&#34;&gt;测试一切&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类型系统非常适合防止逻辑错误
&lt;ul&gt;
&lt;li&gt;减少了测试负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然而，它们在预测或控制运行时性能方面并不是很好&lt;/li&gt;
&lt;li&gt;所以，需要可靠的测试套件
&lt;ul&gt;
&lt;li&gt;理想情况下，您需要一个严格不同类型的测试&lt;/li&gt;
&lt;li&gt;几秒钟内运行的快速基于示例的测试&lt;/li&gt;
&lt;li&gt;可以在一夜之间运行的更彻底的基于属性的测试&lt;/li&gt;
&lt;li&gt;能够在进程中模拟整个集群&lt;/li&gt;
&lt;li&gt;控制与模拟网络的并发交织&lt;/li&gt;
&lt;li&gt;自动化的硬件故障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测试分布式系统比测试本地系统要困难得多
&lt;ul&gt;
&lt;li&gt;你从未听说过的大量失败模式&lt;/li&gt;
&lt;li&gt;组合状态空间&lt;/li&gt;
&lt;li&gt;错误只能表现为小&lt;em&gt;大&lt;/em&gt;中间时间&lt;em&gt;空间&lt;/em&gt;并发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;这很慢&#34;&gt;“这很慢”&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;杰夫霍奇斯：你会听到的最糟糕的错误是“它很慢”
&lt;ul&gt;
&lt;li&gt;一直发生，很难本地化&lt;/li&gt;
&lt;li&gt;由于系统是分布式的，因此必须分析多个节点
&lt;ul&gt;
&lt;li&gt;为此建立的分析工具并不多&lt;/li&gt;
&lt;li&gt;Sigelman 等，2010：Dapper，一种大规模分布式系统跟踪 基础设施&lt;/li&gt;
&lt;li&gt;Zipkin&lt;/li&gt;
&lt;li&gt;大工具投资&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分析工具擅长发现 CPU 问题
&lt;ul&gt;
&lt;li&gt;但高延迟通常是 IO 的标志，而不是 CPU&lt;/li&gt;
&lt;li&gt;磁盘延迟&lt;/li&gt;
&lt;li&gt;网络延迟&lt;/li&gt;
&lt;li&gt;GC 延迟&lt;/li&gt;
&lt;li&gt;队列延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尝试使用应用程序级指标本地化问题
&lt;ul&gt;
&lt;li&gt;然后深入了解流程和操作系统性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行相同工作的节点之间的延迟差异是一个重要信号
&lt;ul&gt;
&lt;li&gt;1/3 节点慢：可能是节点硬件，重新路由&lt;/li&gt;
&lt;li&gt;3/3 节点缓慢：可能是逻辑错误：查看分片大小，工作负载，查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扇出工作负载放大了尾部延迟
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.google.com/pubs/pub40801.html&#34;&gt;Jeff Dean，2013：The Tail at Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;考虑推测并行性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测量一切&#34;&gt;测量一切&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;生产中的缓慢（和彻头彻尾的错误）源于 &lt;em&gt;相互作用&lt;/em&gt; 系统
&lt;ul&gt;
&lt;li&gt;为什么？因为您的全面测试套件可能验证了单一系统大多是正确的&lt;/li&gt;
&lt;li&gt;所以我们需要一种方法来了解系统在生产中做了什么&lt;/li&gt;
&lt;li&gt;在某种程度上，良好的监控就像持续测试
&lt;ul&gt;
&lt;li&gt;但不是替代品：这些是不同的领域&lt;/li&gt;
&lt;li&gt;两者均可确保您的更改正常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;想要高频监控
&lt;ul&gt;
&lt;li&gt;生产行为可以在 1 毫秒的规模上进行
&lt;ul&gt;
&lt;li&gt;TCP incast&lt;/li&gt;
&lt;li&gt;理想情况下~~ 1ms 分辨率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在极限情况下，Ops 响应时间与观察延迟呈线性关系
&lt;ul&gt;
&lt;li&gt;约 1 秒的端到端延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理想情况下，毫秒级延迟，也可能是 ms 分辨率
&lt;ul&gt;
&lt;li&gt;通常成本过高;回到 1 或 10 秒&lt;/li&gt;
&lt;li&gt;有时你可以忍受 60 秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于容量规划，每小时/每日季节性更有用&lt;/li&gt;
&lt;li&gt;测量应与应用程序紧密耦合
&lt;ul&gt;
&lt;li&gt;只衡量重要的事情
&lt;ul&gt;
&lt;li&gt;回应请求很重要&lt;/li&gt;
&lt;li&gt;节点 CPU 并不重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大多数系统的关键指标
&lt;ul&gt;
&lt;li&gt;Apdex：在延迟 SLA 内使用成功的应答&lt;/li&gt;
&lt;li&gt;延迟分布：0,0.5,0.95,0.99,1
&lt;ul&gt;
&lt;li&gt;百分位数，而不是平均数&lt;/li&gt;
&lt;li&gt;顺便说一句，你不能采取百分位数的均值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总吞吐量&lt;/li&gt;
&lt;li&gt;队列统计&lt;/li&gt;
&lt;li&gt;其他系统延迟/吞吐量的主观体验
&lt;ul&gt;
&lt;li&gt;数据库可能认为它很健康，但客户可能会觉得它很慢&lt;/li&gt;
&lt;li&gt;组合爆炸 —— 在深入故障时最好使用它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;您可能必须自己编写此测量
&lt;ul&gt;
&lt;li&gt;投资指标库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开箱即用的监控通常无法衡量真正重要的因素：您的 应用程序的行为
&lt;ul&gt;
&lt;li&gt;但它在追踪问题原因方面非常有用&lt;/li&gt;
&lt;li&gt;主机指标，如 CPU，磁盘等&lt;/li&gt;
&lt;li&gt;你的应用程序做了一些常见的事情（例如 rails 应用程序）工具，如 New Relic，运作良好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端的分片指标
&lt;ul&gt;
&lt;li&gt;当用户具有不同的工作负载时很有用&lt;/li&gt;
&lt;li&gt;可以调整阈值以适应该客户端&lt;/li&gt;
&lt;li&gt;主要客户端分一些，“其余”的另一个桶&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;超级工具：分布式跟踪（Zipkin，Dapper 等）
&lt;ul&gt;
&lt;li&gt;大量时间投资&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-chow.pdf&#34;&gt;神秘机器&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;从跟踪数据自动推断服务之间的因果关系&lt;/li&gt;
&lt;li&gt;识别关键路径&lt;/li&gt;
&lt;li&gt;在实施之前对新算法进行性能建模&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;日志&#34;&gt;日志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;记录在大规模系统上不太有用
&lt;ul&gt;
&lt;li&gt;问题可能未本地化到一个节点
&lt;ul&gt;
&lt;li&gt;当请求触及更多服务时，必须跟踪许多日志文件&lt;/li&gt;
&lt;li&gt;投资日志收集基础设施
&lt;ul&gt;
&lt;li&gt;ELK，Splunk，etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非结构化信息难以汇总
&lt;ul&gt;
&lt;li&gt;记录结构化事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;影子流量&#34;&gt;影子流量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;负载测试仅在模拟负载与实际负载匹配时才有用&lt;/li&gt;
&lt;li&gt;考虑转储生产流量
&lt;ul&gt;
&lt;li&gt;太棒了：使用 SIGUSR1 终止一个进程，它会转储五分钟的请求加载&lt;/li&gt;
&lt;li&gt;太棒了：tcpdump / tcpreplay 用于请求的限制&lt;/li&gt;
&lt;li&gt;太棒了：将实时流量映射到您的暂存/ QA 节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;见 Envoy from Lyft&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;版本&#34;&gt;版本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;据我所知，协议版本控制是一个广泛存在的问题
&lt;ul&gt;
&lt;li&gt;包括所有消息的版本标记&lt;/li&gt;
&lt;li&gt;包括兼容性逻辑&lt;/li&gt;
&lt;li&gt;当客户的请求无法处理时通知客户
&lt;ul&gt;
&lt;li&gt;并对此进行检测，以便了解哪些系统必须升级&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;推广&#34;&gt;推广&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;推广通常是您如何解决问题的方法&lt;/li&gt;
&lt;li&gt;花时间进行自动化，可靠的部署
&lt;ul&gt;
&lt;li&gt;放大你做的其他事情&lt;/li&gt;
&lt;li&gt;节点平滑循环以防止流量中断
&lt;ul&gt;
&lt;li&gt;这意味着您将同时运行多个版本的软件
&lt;ul&gt;
&lt;li&gt;版本控制开的坏头&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通知负载均衡器会退出&lt;/li&gt;
&lt;li&gt;协调以防止级联故障&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;仅推出一小部分负载或部分用户
&lt;ul&gt;
&lt;li&gt;逐渐增加新软件的用户数量&lt;/li&gt;
&lt;li&gt;当您看到错误时，可以还原或向前回滚&lt;/li&gt;
&lt;li&gt;考虑在生产环境中跟踪流量并比较旧/新版本
&lt;ul&gt;
&lt;li&gt;确定新代码是否更快和正确的好方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自动化控制&#34;&gt;自动化控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自动化故障处理很不错&lt;/li&gt;
&lt;li&gt;但还不够
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Ironies of Automation&amp;rdquo;, Bainbridge 1983
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pdfs.semanticscholar.org/0713/bb9d9b138e4e0a15406006de9b0cddf68e28.pdf&#34;&gt;https://pdfs.semanticscholar.org/0713/bb9d9b138e4e0a15406006de9b0cddf68e28.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特性标志&#34;&gt;特性标志&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我们希望在部署后逐步推出变更集
&lt;ul&gt;
&lt;li&gt;逐个引入功能，以了解它们对指标的影响&lt;/li&gt;
&lt;li&gt;逐步将负载从一个数据库转移到另一个数据库&lt;/li&gt;
&lt;li&gt;当推广出错时禁用功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们希望在某些服务降级时获得部分可用性
&lt;ul&gt;
&lt;li&gt;禁用代价昂贵的功能以在故障期间加速恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用高度可用的协调服务来确定要使用的代码路径或多久一次
&lt;ul&gt;
&lt;li&gt;此服务应具有最小的依赖性
&lt;ul&gt;
&lt;li&gt;不要使用主 DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当出现问题时，您可以调整系统的行为
&lt;ul&gt;
&lt;li&gt;协调服务停止时，失败 &lt;em&gt;安全&lt;/em&gt; ！&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混沌工程&#34;&gt;混沌工程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打破生产中的东西
&lt;ul&gt;
&lt;li&gt;迫使工程师适当地 &lt;em&gt;现在&lt;/em&gt; 处理故障，而不是稍后对事件的响应&lt;/li&gt;
&lt;li&gt;识别关键路径中的意外依赖关系
&lt;ul&gt;
&lt;li&gt;“当新的统计数据服务出现故障时，需要使用 API。是吗？ &lt;em&gt;确定&lt;/em&gt; 那是必要的吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要良好的仪表和警报，因此您可以衡量事件影响&lt;/li&gt;
&lt;li&gt;爆炸半径有限
&lt;ul&gt;
&lt;li&gt;不要每五分钟核对整个数据中心
&lt;ul&gt;
&lt;li&gt;但是每季度确实地试一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要破坏复制组中的许多节点&lt;/li&gt;
&lt;li&gt;一次只打破一小部分请求/用户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;哦不队列&#34;&gt;哦不，队列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个队列都是一个可怕的地方，可怕的错误
&lt;ul&gt;
&lt;li&gt;没有节点有无限制的内存。你的队列 &lt;em&gt;必须&lt;/em&gt; 有界限&lt;/li&gt;
&lt;li&gt;但有多大？没人知道&lt;/li&gt;
&lt;li&gt;在生产环境中检测你的队列以找出答案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利特尔定律：平均队列深度 = 平均到达率 * 平均延迟
&lt;ul&gt;
&lt;li&gt;这是分布式无关的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用队列以平滑负载的波动
&lt;ul&gt;
&lt;li&gt;以延迟为代价提高吞吐量&lt;/li&gt;
&lt;li&gt;如果您的负载高于容量，则没有队列可以节省您的费用
&lt;ul&gt;
&lt;li&gt;当队列变满时，卸载负荷或施加背压&lt;/li&gt;
&lt;li&gt;测量这个
&lt;ul&gt;
&lt;li&gt;当发生卸载负荷时，警铃响起&lt;/li&gt;
&lt;li&gt;背压作为上游延迟可见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;测量队列深度
&lt;ul&gt;
&lt;li&gt;高深度是您需要添加节点容量的线索
&lt;ul&gt;
&lt;li&gt;端到端队列延迟应小于波动时间尺度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提高队列大小可能很诱人，但这是一个恶性循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有这一切都很难。我没有你的好答案
&lt;ul&gt;
&lt;li&gt;问 Jeff Hodges 为什么这很难：看他 2013 年的 RICON West 谈话&lt;/li&gt;
&lt;li&gt;见 Zach Tellman —— 一切都会流动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回顾-6&#34;&gt;回顾&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;运行分布式系统需要开发人员，QA 和运营工程师之间的合作。静态分析和包括基于示例和属性的测试的测试套件可以帮助确保程序的正确性，但了解生产行为需要全面的测量和警报。成熟的分布式系统团队经常投资工具：流量阴影，版本控制，增量部署和功能标记。最后，队列需要特别小心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进一步阅读&#34;&gt;进一步阅读&lt;/h2&gt;
&lt;h3 id=&#34;线上&#34;&gt;线上&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mixu has a delightful book on distributed systems with incredible detail. &lt;a href=&#34;http://book.mixu.net/distsys/&#34;&gt;http://book.mixu.net/distsys/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeff Hodges has some excellent, production-focused advice. &lt;a href=&#34;https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/&#34;&gt;https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Fallacies of Distributed Computing is a classic text on mistaken assumptions we make designing distributed systems. &lt;a href=&#34;http://www.rgoarchitects.com/Files/fallacies.pdf&#34;&gt;http://www.rgoarchitects.com/Files/fallacies.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Christopher Meiklejohn has a list of key papers in distributed systems. &lt;a href=&#34;http://christophermeiklejohn.com/distributed/systems/2013/07/12/readings-in-distributed-systems.html&#34;&gt;http://christophermeiklejohn.com/distributed/systems/2013/07/12/readings-in-distributed-systems.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dan Creswell has a lovely reading list. &lt;a href=&#34;https://dancres.github.io/Pages/&#34;&gt;https://dancres.github.io/Pages/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;丛书&#34;&gt;丛书&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Martin Kleppmann 的 &lt;a href=&#34;https://dataintensive.net/&#34;&gt;数据密集型应用设计&lt;/a&gt;为从业者提供了分布式系统的全面介绍。&lt;/li&gt;
&lt;li&gt;Nancy Lynch 的 &amp;ldquo;Distributed Algorithms&amp;rdquo; 更理论的角度对该领域进行了全面概述&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>